{"id":362,"date":"2017-02-20T08:13:21","date_gmt":"2017-02-20T08:13:21","guid":{"rendered":"http:\/\/alka-web.com\/alka-web-com\/?p=362"},"modified":"2021-03-26T04:24:54","modified_gmt":"2021-03-26T04:24:54","slug":"create-plugin-to-login-register-using-facebook","status":"publish","type":"post","link":"https:\/\/woffice.io\/create-plugin-to-login-register-using-facebook\/","title":{"rendered":"How to create a WordPress plugin to login and register using Facebook API"},"content":{"rendered":"<p>In this tutorial, we will see how to write\u00a0a simple WordPress plugin in order to <strong>Login and Register<\/strong> your users right on your WordPress site using the <strong>Facebook API<\/strong>. It is very easy to do and we will go through each step one\u00a0by one.<br \/>\nYou need to have basics in <em>PHP, WordPress development, CSS and HTML<\/em>. But nothing tricky here.<br \/>\nYou can find the complete plugin on Github: <a href=\"https:\/\/github.com\/2Fwebd\/alka-facebook\" target=\"_blank\" rel=\"noopener noreferrer\">Plugin repository<\/a><br \/>\nNote that this is a first part, as you will see at the end, there are many things that can be improved.<br \/>\n<strong>Update: <a href=\"https:\/\/alka-web.com\/blog\/how-to-create-a-\u2026ebook-api-part-2\/\" target=\"_blank\" rel=\"noopener noreferrer\">You can find part 2 here<\/a>!<\/strong><br \/>\nThe authentication flow from Facebook is quite simple:<\/p>\n<ul>\n<li>We use the Facebook SDK to generate a login link to redirects toward Facebook&#8217;s server.<\/li>\n<li>If everything is good and the user agrees to let our application get some details. We are redirected back to our WordPress site.<\/li>\n<li>During the redirection, Facebook gives us a temporary &#8220;Access Token&#8221;.<\/li>\n<li>We use this token to ask the Facebook API to get the user&#8217;s details: ID, Name, Email&#8230;<\/li>\n<li>We handle the data in WordPress by either connecting the user if there was a previous connection or by creating a new account.<\/li>\n<\/ul>\n<h2>What is the goal?<\/h2>\n<p>We want to provide our users a very simple way to login and register to WordPress. Without email, username or password to enter in order to log in. <em>Just a single button to click<\/em>.<br \/>\nThe easiest way will be to create a new <strong>shortcode<\/strong> which will display a Login\/Register button and any error that should be displayed. So you can use it in any page \/ post \/ widget \u00a0or theme template using the <a href=\"https:\/\/developer.wordpress.org\/reference\/functions\/do_shortcode\/\" target=\"_blank\" rel=\"noopener noreferrer\">do_sho<\/a><a href=\"https:\/\/developer.wordpress.org\/reference\/functions\/do_shortcode\/\" target=\"_blank\" rel=\"noopener noreferrer\">rtcode<\/a> function.<br \/>\nThe shortcode <strong>will display nothing<\/strong> if the user is currently logged in. You might want to change that behavior.<br \/>\nWe will use a plugin to wrap our code so it can work in any site. This plugin will be using the Facebook SDK and an object oriented coding style.<br \/>\nFeel free to change all the &#8220;alka&#8221; word \u00a0with your organization&#8217;s name.<\/p>\n<h2>Step 1: Building our plugin and\u00a0importing the Facebook PHP SDK<\/h2>\n<p>First, we need to create a new plugin so our code is run by WordPress. Create a new directory &#8220;<strong>alka-facebook<\/strong>&#8221; (in wp-content\/plugins\/) that will hold all our files. Then, let&#8217;s get started! Create a new <strong>alka-facebook.php<\/strong> file:<\/p>\n<pre>&lt;?php\n\/**\n * Plugin Name:       Alka Facebook\n * Description:       Login and Register your users using Facebook's API\n * Version:           1.0.0\n * Author:            Alkaweb\n * Author URI:        http:\/\/alka-web.com\/alka-web-com\n * Text Domain:       alkaweb\n * License:           GPL-2.0+\n * License URI:       http:\/\/www.gnu.org\/licenses\/gpl-2.0.txt\n * GitHub Plugin URI: https:\/\/github.com\/2Fwebd\/alka-facebook\n *\/\nclass AlkaFacebook{\n    \/**\n     * AlkaFacebook constructor.\n     *\/\n    public function __construct()\n    {\n    }\n}\n\/*\n * Starts our plugins, easy!\n *\/\nnew AlkaFacebook();<\/pre>\n<p>You can now enable the plugin in Plugins &gt; <strong>Alka Facebook<\/strong> &gt; Activate. All our code will now be executed by WordPress, which is good.<br \/>\nThen, we can now import the <a href=\"https:\/\/developers.facebook.com\/docs\/reference\/php\/\" target=\"_blank\" rel=\"noopener noreferrer\"><strong>Facebook PHP\u00a0Sdk<\/strong><\/a> which will help us to make our calls to the Facebook API using PHP.<br \/>\nThere are several ways to import it, the easiest one in WordPress is to download the SDK, rename the folder as facebook-sdk and move it to our plugin&#8217;s directory:<br \/>\n<img loading=\"lazy\" class=\"alignnone wp-image-367 size-full\" title=\"Directory structure of the plugin\" src=\"https:\/\/alka-web.com\/wp\/wp-content\/uploads\/2017\/02\/facebook-sdk.png\" width=\"2050\" height=\"874\" \/><br \/>\nNow, we need to call the Facebook Sdk files required\u00a0by the a<em>uthentication<\/em>\u00a0actions that will be done within our plugin.<br \/>\nJust add the following to the top of the plugin&#8217;s file, right after the plugin header:<\/p>\n<pre>\/*\n * Import the Facebook SDK and load all the classes\n *\/\ninclude (plugin_dir_path( __FILE__ ) . 'facebook-sdk\/autoload.php');\n\/*\n * Classes required to call the Facebook API\n * They will be used by our class\n *\/\nuse Facebook\\Facebook;\nuse Facebook\\Exceptions\\FacebookSDKException;\nuse Facebook\\Exceptions\\FacebookResponseException;<\/pre>\n<h2>Step 2: creating our Facebook Application<\/h2>\n<p>Secondly, in order to make API calls to the Facebook API, we obviously need to get some access. So Facebook knows who is making the calls and requesting the user details.<br \/>\nYou can do that by going on the Facebook Apps page:\u00a0<a href=\"https:\/\/developers.facebook.com\/apps\" target=\"_blank\" rel=\"noopener noreferrer\">https:\/\/developers.facebook.com\/apps<\/a>.<\/p>\n<ul>\n<li>Click the &#8220;<strong>Add a new App<\/strong>&#8221; button<\/li>\n<li>Set up the name and create your APP<\/li>\n<li>Enable the Products &gt; <strong>Facebook Login\u00a0<\/strong><\/li>\n<li>Add your Callback URL, which is <strong>http:\/\/yoursite.com\/wp-admin\/admin-ajax.php?action=alka_facebook\u00a0<\/strong>you definitely need to change\u00a0<strong>yoursite.com\u00a0<\/strong>with your site&#8217;s URL.<\/li>\n<\/ul>\n<p><img loading=\"lazy\" class=\"alignnone wp-image-370 size-full\" title=\"Facebook API settings\" src=\"https:\/\/alka-web.com\/wp\/wp-content\/uploads\/2017\/02\/Test_Eonet_-_Facebook_Login_-_Facebook_for_Developers.jpg\" width=\"2630\" height=\"988\" \/><\/p>\n<ul>\n<li>Go to the Settings to get your <strong>App Id<\/strong> and <strong>App Secret\u00a0<\/strong><\/li>\n<\/ul>\n<p>We can now save them in our Class safely:<\/p>\n<pre>class AlkaFacebook{\n    \/**\n     * Facebook APP ID\n     *\n     * @var string\n     *\/\n    private $app_id = 'xxxxxxxxxxxx';\n    \/**\n     * Facebook APP Secret\n     *\n     * @var string\n     *\/\n    private $app_secret = 'yyyyyyyyyyyyy';\n    \/**\n     * Callback URL used by the API\n     *\n     * @var string\n     *\/\n    private $callback_url = 'http:\/\/yoursite.com\/wp-admin\/admin-ajax.php?action=alka_facebook';<\/pre>\n<pre><\/pre>\n<p>We are now ready to use Facebook API safely from our site.<\/p>\n<h2>Step 3: Creating our Shortcode<\/h2>\n<p>Thirdly, we will create a very simple <a href=\"https:\/\/codex.wordpress.org\/Shortcode_API\" target=\"_blank\" rel=\"noopener noreferrer\">shortcode<\/a>\u00a0to display our button, you can add options to this shortcode to go further we won&#8217;t do it in this tutorial though.<br \/>\nThe shortcode is added using the &#8220;<strong>add_shortcode<\/strong>&#8221; WordPress function in our constructor and calls a method &#8220;<strong>renderShortcode<\/strong>&#8220;, which has a pretty good name according to how we will use it.<\/p>\n<pre>\/**\n * AlkaFacebook constructor.\n *\/\npublic function __construct()\n{\n    \/\/ We register our shortcode\n    add_shortcode( 'alka_facebook', array($this, 'renderShortcode') );\n}\n\/**\n * Render the shortcode [alka_facebook\/]\n *\n * It displays our Login \/ Register button\n *\/\npublic function renderShortcode() {\n    \/\/ No need for the button is the user is already logged\n    if(is_user_logged_in())\n        return;\n    \/\/ Different labels according to whether the user is allowed to register or not\n    if (get_option( 'users_can_register' )) {\n        $button_label = __('Login or Register with Facebook', 'alkaweb');\n    } else {\n        $button_label = __('Login with Facebook', 'alkaweb');\n    }\n    \/\/ Button markup\n    $html = '&lt;div id=\"alka-facebook-wrapper\"&gt;';\n    $html .= '&lt;a href=\"#\" id=\"alka-facebook-button\"&gt;'.$button_label.'&lt;\/a&gt;';\n    $html .= '&lt;\/div&gt;';\n    \/\/ Write it down\n    return $html;\n}<\/pre>\n<p>You can now use\u00a0<strong>[alka_facebook \/]<\/strong> in your editor in any page and save. For testing purpose, <strong>you can now log out.<\/strong><\/p>\n<h2>Step4: Connecting to the API<\/h2>\n<p>Next, we will now create a connection between our plugin and the Facebook API using our Facebook App&#8217;s details. In order to achieve this, we will create a new method to initialize the connection as it will be called several times, we return a Facebook instance:<\/p>\n<pre>\/**\n * Init the API Connection\n *\n * @return Facebook\n *\/\nprivate function initApi() {\n    $facebook = new Facebook([\n        'app_id' =&gt; $this-&gt;app_id,\n        'app_secret' =&gt; $this-&gt;app_secret,\n        'default_graph_version' =&gt; 'v2.2',\n        'persistent_data_handler' =&gt; 'session'\n    ]);\n    return $facebook;\n}<\/pre>\n<p>Thus, we can now\u00a0use the SDK to get a login\/register URL that will be used whenever the user clicks our button. Note that we use the PHP session to pass the data through all the methods and Facebook&#8217;s authentication steps:<\/p>\n<pre>\/**\n * Login URL to Facebook API\n *\n * @return string\n *\/\nprivate function getLoginUrl() {\n    if(!session_id()) {\n        session_start();\n    }\n    $fb = $this-&gt;initApi();\n    $helper = $fb-&gt;getRedirectLoginHelper();\n    \/\/ Optional permissions\n    $permissions = ['email'];\n    $url = $helper-&gt;getLoginUrl($this-&gt;callback_url, $permissions);\n    return esc_url($url);\n}<\/pre>\n<p>So, we can now use this URL in our button (renderShortcode) method:<\/p>\n<pre>$html .= '&lt;a href=\"'.$this-&gt;getLoginUrl().'\" class=\"btn\" id=\"alka-facebook-button\"&gt;'.$button_label.'&lt;\/a&gt;';<\/pre>\n<p>Our Facebook signing button now redirects us to Facebook, we are also redirect back to our callback URL. Yi hay!<\/p>\n<h2>Step 5: The callback<\/h2>\n<p>Lastly, the Callback is the code run by our plugin whenever an user is done with the Facebook dialog. He is redirected back to our site. For this matter, we created a new URL (already used earlier)\u00a0http:\/\/yoursite.com\/wp-admin\/admin-ajax.php?action=alka_facebook which is basically a way to run our code with our own URL in\u00a0WordPress. This is using the AJAX way, it would be better to use the REST API later though.<\/p>\n<pre>\/**\n * AlkaFacebook constructor.\n *\/\npublic function __construct()\n{\n    \/\/ We register our shortcode\n    add_shortcode( 'alka_facebook', array($this, 'renderShortcode') );\n    \/\/ Callback URL\n    add_action( 'wp_ajax_alka_facebook', array($this, 'apiCallback'));\n    add_action( 'wp_ajax_nopriv_alka_facebook', array($this, 'apiCallback'));\n}<\/pre>\n<p>And we need to create our callback&#8217;s method. This callback decides whether the user must be logged in\u00a0or registered. This is where all the magic happens!<br \/>\nWe will introduce a bunch of new stuff first here:<\/p>\n<ul>\n<li>A new &#8220;<strong>alka_facebook_message<\/strong>&#8221; <em>session variable<\/em> that will handle any error or message that must be displayed back to the user.<\/li>\n<li>A new &#8220;<strong>alka_facebook_url<\/strong>&#8221; <em>session variable<\/em> to redirect our user properly after the callback. It saves the page&#8217;s URL (where the shortcode is located)<\/li>\n<li>A new class property:\u00a0<strong>$access_token<\/strong> to use\u00a0the access token from the Facebook API<\/li>\n<li>A new class property:\u00a0<strong>$redirect_url<\/strong>\u00a0to use\u00a0our alka_facebook_url within our class<\/li>\n<li>A \u00a0new class property: <strong>$facebook_details<\/strong> to use the user data returned by the Facebook URL.<\/li>\n<\/ul>\n<p>Moreover, we use class properties so we can split our code in several methods and never pass anything as an argument but rather as a class property. Which is cleaner.<br \/>\nIn order that\u00a0we now add our new properties:<\/p>\n<pre>\/**\n * Access token from Facebook\n *\n * @var string\n *\/\nprivate $access_token;\n\/**\n * Where we redirect our user after the process\n *\n * @var string\n *\/\nprivate $redirect_url;\n\/**\n * User details from the API\n *\/\nprivate $facebook_details;<\/pre>\n<p>We can also <strong>update<\/strong> our shortcode render method to pass the URL and display any message that would be returned by the callback through the <strong>$_SESSION<\/strong>:<\/p>\n<pre>\/**\n * Render the shortcode [alka_facebook\/]\n *\n * It displays our Login \/ Register button\n *\/\npublic function renderShortcode() {\n    \/\/ Start the session\n    if(!session_id()) {\n        session_start();\n    }\n    \/\/ No need for the button is the user is already logged\n    if(is_user_logged_in())\n        return;\n    \/\/ We save the URL for the redirection:\n    if(!isset($_SESSION['alka_facebook_url']))\n        $_SESSION['alka_facebook_url'] = 'http:\/\/'.$_SERVER['HTTP_HOST'].$_SERVER['REQUEST_URI'];\n    \/\/ Different labels according to whether the user is allowed to register or not\n    if (get_option( 'users_can_register' )) {\n        $button_label = __('Login or Register with Facebook', 'alkaweb');\n    } else {\n        $button_label = __('Login with Facebook', 'alkaweb');\n    }\n    \/\/ HTML markup\n    $html = '&lt;div id=\"alka-facebook-wrapper\"&gt;';\n    \/\/ Messages\n    if(isset($_SESSION['alka_facebook_message'])) {\n        $message = $_SESSION['alka_facebook_message'];\n        $html .= '&lt;div id=\"alka-facebook-message\" class=\"alert alert-danger\"&gt;'.$message.'&lt;\/div&gt;';\n        \/\/ We remove them from the session\n        unset($_SESSION['alka_facebook_message']);\n    }\n    \/\/ Button\n    $html .= '&lt;a href=\"'.$this-&gt;getLoginUrl().'\" class=\"btn\" id=\"alka-facebook-button\"&gt;'.$button_label.'&lt;\/a&gt;';\n    $html .= '&lt;\/div&gt;';\n    \/\/ Write it down\n    return $html;\n}<\/pre>\n<p>So what about we build our callback method now? The callback is split\u00a0in 4 other methods:<\/p>\n<ul>\n<li><strong>getToken<\/strong>, to ask the Facebook API to get an authentication unique token. See the Facebook documentation <a href=\"https:\/\/developers.facebook.com\/docs\/facebook-login\/access-tokens\" target=\"_blank\" rel=\"noopener noreferrer\">here<\/a> for all the details.<\/li>\n<li><strong>getUserDetails<\/strong>, once we have a token, we now ask the API to get the user&#8217;s details (name, email&#8230;). You can see all the information that you can fetch <a href=\"https:\/\/developers.facebook.com\/docs\/facebook-login\/permissions#reference-public_profile\" target=\"_blank\" rel=\"noopener noreferrer\">here<\/a>.<\/li>\n<li><strong>loginUser<\/strong>, to login the User to WordPress.<\/li>\n<li><strong>createUser<\/strong>, to register a new user in WordPress.<\/li>\n<\/ul>\n<p>Therefore, to decide if we login or register the user, we save for each user a new <a href=\"https:\/\/codex.wordpress.org\/Database_Description#Table:_wp_usermeta\" target=\"_blank\" rel=\"noopener noreferrer\">user meta<\/a>: <strong>alka_facebook_id<\/strong>. Which is the Facebook user&#8217;s id. If it exists in our database, we login the user. If not, we make sure registration is\u00a0allowed on the site before creating a new user.<\/p>\n<pre>\/**\n * API call back running whenever we hit \/wp-admin\/admin-ajax.php?action=alka_facebook\n * This code handles the Login \/ Regsitration part\n *\/\npublic function apiCallback() {\n    if(!session_id()) {\n        session_start();\n    }\n    \/\/ Set the Redirect URL:\n    $this-&gt;redirect_url = (isset($_SESSION['alka_facebook_url'])) ? $_SESSION['alka_facebook_url'] : home_url();\n    \/\/ We start the connection\n    $fb = $this-&gt;initApi();\n    \/\/ We save the token in our instance\n    $this-&gt;access_token = $this-&gt;getToken($fb);\n    \/\/ We get the user details\n    $this-&gt;facebook_details = $this-&gt;getUserDetails($fb);\n    \/\/ We first try to login the user\n    $this-&gt;loginUser();\n    \/\/ Otherwise, we create a new account\n    $this-&gt;createUser();\n    \/\/ Redirect the user\n    header(\"Location: \".$this-&gt;redirect_url, true);\n    die();\n}<\/pre>\n<p>Let&#8217;s create our 4\u00a0methods within our call back method:<\/p>\n<pre>\/**\n * Get a TOKEN from the Facebook API\n * Or redirect back if there is an error\n *\n * @param $fb Facebook\n * @return string - The Token\n *\/\nprivate function getToken($fb) {\n    \/\/ Assign the Session variable for Facebook\n    $_SESSION['FBRLH_state'] = $_GET['state'];\n    \/\/ Load the Facebook SDK helper\n    $helper = $fb-&gt;getRedirectLoginHelper();\n    \/\/ Try to get an access token\n    try {\n        $accessToken = $helper-&gt;getAccessToken();\n    }\n    \/\/ When Graph returns an error\n    catch(FacebookResponseException $e) {\n        $error = __('Graph returned an error: ','alkaweb'). $e-&gt;getMessage();\n        $message = array(\n            'type' =&gt; 'error',\n            'content' =&gt; $error\n        );\n    }\n    \/\/ When validation fails or other local issues\n    catch(FacebookSDKException $e) {\n        $error = __('Facebook SDK returned an error: ','alkaweb'). $e-&gt;getMessage();\n        $message = array(\n            'type' =&gt; 'error',\n            'content' =&gt; $error\n        );\n    }\n    \/\/ If we don't got a token, it means we had an error\n    if (!isset($accessToken)) {\n        \/\/ Report our errors\n        $_SESSION['alka_facebook_message'] = $message;\n        \/\/ Redirect\n        header(\"Location: \".$this-&gt;redirect_url, true);\n        die();\n    }\n    return $accessToken-&gt;getValue();\n}\n<\/pre>\n<pre>\/**\n * Get user details through the Facebook API\n *\n * @link https:\/\/developers.facebook.com\/docs\/facebook-login\/permissions#reference-public_profile\n * @param $fb Facebook\n * @return \\Facebook\\GraphNodes\\GraphUser\n *\/\nprivate function getUserDetails($fb)\n{\n    try {\n        $response = $fb-&gt;get('\/me?fields=id,name,first_name,last_name,email,link', $this-&gt;access_token);\n    } catch(FacebookResponseException $e) {\n        $message = __('Graph returned an error: ','alkaweb'). $e-&gt;getMessage();\n        $message = array(\n            'type' =&gt; 'error',\n            'content' =&gt; $error\n        );\n    } catch(FacebookSDKException $e) {\n        $message = __('Facebook SDK returned an error: ','alkaweb'). $e-&gt;getMessage();\n        $message = array(\n            'type' =&gt; 'error',\n            'content' =&gt; $error\n        );\n    }\n    \/\/ If we caught an error\n    if (isset($message)) {\n        \/\/ Report our errors\n        $_SESSION['alka_facebook_message'] = $message;\n        \/\/ Redirect\n        header(\"Location: \".$this-&gt;redirect_url, true);\n        die();\n    }\n    return $response-&gt;getGraphUser();\n}<\/pre>\n<pre>\/**\n * Login an user to WordPress\n *\n * @link https:\/\/codex.wordpress.org\/Function_Reference\/get_users\n * @return bool|void\n *\/\nprivate function loginUser() {\n    \/\/ We look for the `eo_facebook_id` to see if there is any match\n    $wp_users = get_users(array(\n        'meta_key'     =&gt; 'alka_facebook_id',\n        'meta_value'   =&gt; $this-&gt;facebook_details['id'],\n        'number'       =&gt; 1,\n        'count_total'  =&gt; false,\n        'fields'       =&gt; 'id',\n    ));\n    if(empty($wp_users[0])) {\n        return false;\n    }\n    \/\/ Log the user ?\n    wp_set_auth_cookie( $wp_users[0] );\n}<\/pre>\n<pre>\/**\n * Create a new WordPress account using Facebook Details\n *\/\nprivate function createUser() {\n    $fb_user = $this-&gt;facebook_details;\n    \/\/ Create an username\n    $username = sanitize_user(str_replace(' ', '_', strtolower($this-&gt;facebook_details['name'])));\n    \/\/ Creating our user\n    $new_user = wp_create_user($username, wp_generate_password(), $fb_user['email']);\n    if(is_wp_error($new_user)) {\n        \/\/ Report our errors\n        $_SESSION['alka_facebook_message'] = $new_user-&gt;get_error_message();\n        \/\/ Redirect\n        header(\"Location: \".$this-&gt;redirect_url, true);\n        die();\n    }\n    \/\/ Setting the meta\n    update_user_meta( $new_user, 'first_name', $fb_user['first_name'] );\n    update_user_meta( $new_user, 'last_name', $fb_user['last_name'] );\n    update_user_meta( $new_user, 'user_url', $fb_user['link'] );\n    update_user_meta( $new_user, 'alka_facebook_id', $fb_user['id'] );\n    \/\/ Log the user ?\n    wp_set_auth_cookie( $new_user );\n}<\/pre>\n<p>All good! We are\u00a0ready to go.<br \/>\nEach method might require some comments, let me know if you have any question about them. I can update the article but the code is pretty commented though.<br \/>\nYou can see the whole plugin from this <a href=\"https:\/\/github.com\/2Fwebd\/alka-facebook\" target=\"_blank\" rel=\"noopener noreferrer\">Github repository<\/a>.<\/p>\n<h2>Improvements<\/h2>\n<p>This plugin can be improved in several ways:<\/p>\n<ul>\n<li>Create an option panel to get the APP ID and APP SECRET from the WordPress admin, which would be a bit more handy, right?<\/li>\n<li>Styling our button using some cool CSS and a nice Facebook icon.<\/li>\n<li>Displaying a welcome message when the user is logged in.<\/li>\n<li>Saving the avatar from Facebook to WordPress.<\/li>\n<li>Sending an email to the user with his password and username to be able to connect later without Facebook.<\/li>\n<\/ul>\n<p><del>Liked this tutorial? Let us know, we could go through a part 2 where I would explain how to do all these improvements.<\/del><br \/>\n<strong>Update: <a href=\"https:\/\/alka-web.com\/blog\/how-to-create-a-\u2026ebook-api-part-2\/\" target=\"_blank\" rel=\"noopener noreferrer\">You can find part 2 here<\/a>!<\/strong><br \/>\n&nbsp;<br \/>\nThanks for reading!<\/p>\n","protected":false},"excerpt":{"rendered":"<p>In this tutorial, we will see how to write\u00a0a simple WordPress plugin in order to Login and Register your users right on your WordPress site using the Facebook API. It is very easy to do and we will go through [&hellip;]<\/p>\n","protected":false},"author":1,"featured_media":385,"comment_status":"closed","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[5],"tags":[11,10],"_links":{"self":[{"href":"https:\/\/woffice.io\/wp-json\/wp\/v2\/posts\/362"}],"collection":[{"href":"https:\/\/woffice.io\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/woffice.io\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/woffice.io\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/woffice.io\/wp-json\/wp\/v2\/comments?post=362"}],"version-history":[{"count":1,"href":"https:\/\/woffice.io\/wp-json\/wp\/v2\/posts\/362\/revisions"}],"predecessor-version":[{"id":5672,"href":"https:\/\/woffice.io\/wp-json\/wp\/v2\/posts\/362\/revisions\/5672"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/woffice.io\/wp-json\/wp\/v2\/media\/385"}],"wp:attachment":[{"href":"https:\/\/woffice.io\/wp-json\/wp\/v2\/media?parent=362"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/woffice.io\/wp-json\/wp\/v2\/categories?post=362"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/woffice.io\/wp-json\/wp\/v2\/tags?post=362"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}