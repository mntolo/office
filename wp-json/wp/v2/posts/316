{"id":316,"date":"2016-10-25T13:27:40","date_gmt":"2016-10-25T13:27:40","guid":{"rendered":"https:\/\/alka-web.com\/wp\/?p=220"},"modified":"2021-03-26T04:25:06","modified_gmt":"2021-03-26T04:25:06","slug":"how-to-restrict-access-to-wordpress-dashboard-programmatically","status":"publish","type":"post","link":"https:\/\/woffice.io\/how-to-restrict-access-to-wordpress-dashboard-programmatically\/","title":{"rendered":"How to restrict access to the WordPress dashboard programmatically"},"content":{"rendered":"<p>You could think \u201c<em>I just need to install a plugin, there are at least a dozen of plugins that do this<\/em>\u201d. That\u2019s true, there are a lot of plugins that limit the access to the dashboard of WordPress, but <strong>are you sure that a plugin is always the best choose<\/strong>?<br \/>\nIf you want limit the access to your WordPress dashboard<strong> avoiding side effects<\/strong>, or if you tried to do it programmatically by yourself and something gone wrong, this is the article which you are looking for.<!--more--><\/p>\n<h2>Why avoid to use a plugin<\/h2>\n<p>There are a lot of plugins that can help you to achieve this result, just few example:<\/p>\n<ul>\n<li><a href=\"https:\/\/wordpress.org\/plugins\/restrict-dashboard-by-role\/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Restrict Dashboard by Role<\/a><\/li>\n<li><a href=\"https:\/\/wordpress.org\/plugins\/remove-dashboard-access-for-non-admins\/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Remove Dashboard Access<\/a><\/li>\n<li><a href=\"https:\/\/wordpress.org\/plugins\/wp-hide-dashboard\/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">WP Hide Dashboard<\/a><\/li>\n<\/ul>\n<p>So why should you hide your WordPress dashboard programmatically, instead of use one of these plugins? Because an elevated number of plugins can cause many side effects. Foremost it can <strong>increase the loading time of your site<\/strong>, making it slower and unpleasant for your users. In addition you have to update periodically one more plugin and, if the plugin is not longer updated and supported by its author, <strong>it could become a security risk for all your site<\/strong>.<br \/>\nIn my opinion, there is really no reason to take these risks, because you can achieve the same result just writing down very few lines of code.<\/p>\n<h2>Hide the WordPress dashboard avoiding the AJAX trap<\/h2>\n<p>As I told, it\u2019s possible to limit access to the dashboard with few lines of code, it\u2019s actually just a redirect with an if statement, so why many customers have failed and asked us support for this easy task? Because they have not considered <strong>the AJAX trap<\/strong>.<br \/>\nSo let me show you the <strong>wrong way<\/strong> to achieve it. Usually the code of our customers was something like that:<\/p>\n<pre>add_action( 'admin_init', 'my_custom_dashboard_access_handler');\nfunction my_custom_dashboard_access_handler() {\n   \/\/ Check if the current user has admin capabilities\n   if ( !current_user_can( 'manage_users' )) {\n      wp_redirect( home_url() );\n      exit;\n   }\n}<\/pre>\n<p><span style=\"font-weight: 400;\">What is wrong in this code? Actually there is nothing really <\/span><i><span style=\"font-weight: 400;\">wrong<\/span><\/i><span style=\"font-weight: 400;\">, but there is something <\/span><i><span style=\"font-weight: 400;\">missing<\/span><\/i><span style=\"font-weight: 400;\">. Using this code, you&nbsp;forget that every ajax call handled by WordPress is sent to www.yoursite.com\/wp-admin\/wp-ajax.php which is an admin page. <\/span>This mean that<b>&nbsp;the code below blocks every ajax call <\/b>of your site<b>.<\/b><br \/>\nIn the light of this new consideration, this is the working code:<\/p>\n<pre>\/\/ Coould be better adds the function to the 'init' hook and check later if it's an admin page\nadd_action( 'init', 'my_custom_dashboard_access_handler');\nfunction my_custom_dashboard_access_handler() {\n   \/\/ Check if the current page is an admin page\n   \/\/ &amp;&amp; check if the current user has admin capabilities\n   \/\/ &amp;&amp; and ensure that this is not an ajax call\n   if ( is_admin() &amp;&amp; !current_user_can( 'manage_users' ) &amp;&amp; ! ( defined( 'DOING_AJAX' ) &amp;&amp; DOING_AJAX )) {\n      wp_redirect( home_url() );\n      exit;\n   }\n}<\/pre>\n<p><strong>NOTE:<\/strong> You may read around that <code>current_user_can( 'manage_users' )<\/code> and <code>current_user_can( 'administrator' )<\/code> return always the same result. This is wrong because&nbsp;<code>current_user_can( 'administrator' )<\/code> creates troubles in multisite installations, because it return false for superadmins.<\/p>\n<h2>Limit access to the admin panel&nbsp;only to certain roles<\/h2>\n<p>If you want to limit the access to many specific roles and you want avoid to add such many OR statement, you can do in this way:<\/p>\n<pre>\/\/ Could be better adds the function to the 'init' hook and check later if it's an admin page\nadd_action( 'init', 'my_custom_dashboard_access_handler');\nfunction my_custom_dashboard_access_handler() {\n   \/\/ Check if the current page is an admin page\n   \/\/ &amp;&amp; and ensure that this is not an ajax call\n   if ( is_admin() &amp;&amp; !( defined( 'DOING_AJAX' ) &amp;&amp; DOING_AJAX ) ){\n      \/\/Get all capabilities of the current user\n      $user = get_userdata( get_current_user_id() );\n      $caps = ( is_object( $user) ) ? array_keys($user-&gt;allcaps) : array();\n      \/\/All capabilities\/roles listed here are not able to see the dashboard\n      $block_access_to = array('subscriber', 'contributor', 'my-custom-role', 'my-custom-capability');\n      if(array_intersect($block_access_to, $caps)) {\n         wp_redirect( home_url() );\n         exit;\n      }\n   }\n}<\/pre>\n<h2>Conclusion<\/h2>\n<p>You have discovered that rely you to third-part plugins is not always a good idea, it can have some side effects and sometime,like in this case, the result is really really easy to achieve the same result programmatically.<br \/>\nIf you have any question or you think that that something in the code should be even improved, or if you liked the article and you want just say thank you, it would be really appreciated to see a comment right below.<\/p>\n","protected":false},"excerpt":{"rendered":"<p>You could think \u201cI just need to install a plugin, there are at least a dozen of plugins that do this\u201d. That\u2019s true, there are a lot of plugins that limit the access to the dashboard of WordPress, but are [&hellip;]<\/p>\n","protected":false},"author":1,"featured_media":226,"comment_status":"closed","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[5],"tags":[10],"_links":{"self":[{"href":"https:\/\/woffice.io\/wp-json\/wp\/v2\/posts\/316"}],"collection":[{"href":"https:\/\/woffice.io\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/woffice.io\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/woffice.io\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/woffice.io\/wp-json\/wp\/v2\/comments?post=316"}],"version-history":[{"count":1,"href":"https:\/\/woffice.io\/wp-json\/wp\/v2\/posts\/316\/revisions"}],"predecessor-version":[{"id":5677,"href":"https:\/\/woffice.io\/wp-json\/wp\/v2\/posts\/316\/revisions\/5677"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/woffice.io\/wp-json\/wp\/v2\/media\/226"}],"wp:attachment":[{"href":"https:\/\/woffice.io\/wp-json\/wp\/v2\/media?parent=316"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/woffice.io\/wp-json\/wp\/v2\/categories?post=316"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/woffice.io\/wp-json\/wp\/v2\/tags?post=316"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}