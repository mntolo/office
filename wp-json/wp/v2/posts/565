{"id":565,"date":"2017-10-02T22:14:57","date_gmt":"2017-10-02T22:14:57","guid":{"rendered":"https:\/\/alka-web.com\/?p=565"},"modified":"2021-03-26T04:24:54","modified_gmt":"2021-03-26T04:24:54","slug":"create-wordpress-plugin-login-register-using-facebook-api-part-2","status":"publish","type":"post","link":"https:\/\/woffice.io\/create-wordpress-plugin-login-register-using-facebook-api-part-2\/","title":{"rendered":"How to create a WordPress plugin to login and register using Facebook API &#8211; Part 2"},"content":{"rendered":"<p>As promised, here is the part 2 of our tutorial to create a Facebook WordPress plugin. Thanks a lot for your feedback.<\/p>\n\n<p><a href=\"https:\/\/alka-web.com\/blog\/create-plugin-to-login-register-using-facebook\/\" target=\"_blank\" rel=\"noreferrer noopener\">Be sure to checkout part 1 before<\/a><\/p>\n\n\n<p>Before starting off, a special thanks to&nbsp;<a href=\"https:\/\/github.com\/ovidiu-turean\" target=\"_blank\" rel=\"noreferrer noopener\">Ovidiu Turean<\/a> who made a pull request to the repository for the admin side developed in this part 2.<\/p>\n\n\n<p><em>The complete code of this tutorial can be found in the<\/em><a rel=\"noreferrer noopener\" href=\"https:\/\/github.com\/2Fwebd\/alka-facebook\/tree\/V2\" target=\"_blank\"><em> same repository as part 1 under the branch V2<\/em><\/a><em>.<\/em><\/p>\n\n\n<p>So what&#8217;s on our agenda?<\/p>\n\n\n<ol><li>Simple AJAX powered admin page to save the Facebook app ID and secret<\/li><li>Sending an email upon new registration in order to provide the password and username to the user<\/li><li>CSS styling of our Facebook button<\/li><\/ol>\n\n\n<h2>Improvement 1: creating a new WordPress page for the plugin Settings<\/h2>\n\n\n<p>In order to create an admin page for our plugin, we will need to re-organize it so everything is clean and make sense.<\/p>\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><img src=\"https:\/\/alka-web.com\/wp\/wp-content\/uploads\/2017\/09\/classes.jpg\" alt=\"\" class=\"wp-image-571\"\/><\/figure><\/div>\n\n\n<p>So what did we changed?<\/p>\n\n\n<ul><li><em>alka-facebook.php<\/em> is the plugin main file, it&#8217;s the one called by WordPress whenever the plugin is loaded<\/li><li><em>assets\/<\/em><strong> <\/strong>is a folder that will contain all our images, javaScript files as well as stylesheets (.css)<\/li><li><em>classes\/<\/em> contains 2 classes called in alka-facebook.php, one for the API connection and user creation \/ login. The other is only for the admin page.<\/li><\/ul>\n\n\n<p>Let&#8217;s dive in the details by starting with the main file:<\/p>\n\n\n<pre>\n\/**\n * Class AlkaAdmin\n *\n * This class creates a very simple Options page\n *\/\nclass AlkaAdmin\n{\n  \/**\n   * The security nonce\n   *\n   * @var string\n   *\/\n  private $_nonce = 'alka_facebook_admin';\n  \/**\n   * AlkaAdmin constructor.\n   *\/\n  public function __construct()\n{\n    add_action( 'admin_menu', array( $this, 'addAdminMenu' ) );\n    add_action( 'wp_ajax_alka_store_admin_creeds', array( $this, 'storeFacebookAdminCreeds' ) );\n    add_action( 'admin_enqueue_scripts', array( $this, 'addAdminScripts' ) );\n  }\n}\n\/*\n * Starts our admin class, easy!\n *\/\nnew AlkaAdmin();\n<\/pre>\n\n\n<p>As you can see, the main difference with part 1 is that this file is just here to call other files. The Facebook SDK and then our plugin classes. We define as well 2 constants that will be used to retrieve the different files within the plugin.<\/p>\n\n\n<ul><li><em>ALKA_FACEBOOK_PATH<\/em> for the PHP includes<\/li><li><em>ALKA_FACEBOOK_URL<\/em> for the .js, .css and image calls from our browsers<\/li><\/ul>\n\n\n<p>Once this done, we can create our admin page, using the brand new AlkaAdmin.php file. Our admin page is really simple, 2 fields (Facebook App ID, Facebook App Secret), the callback URL to help the user. <\/p>\n\n\n<p>We save everything using <a rel=\"noreferrer noopener\" href=\"https:\/\/codex.wordpress.org\/AJAX_in_Plugins\" target=\"_blank\">AJAX<\/a> so we don&#8217;t have to reload the page. Therefore we will also use a <a rel=\"noreferrer noopener\" href=\"https:\/\/codex.wordpress.org\/WordPress_Nonces\" target=\"_blank\">WordPress Nonce<\/a> to add an extra security layer.<\/p>\n\n\n<pre class=\"wp-block-preformatted\"><br \/>\/**<br \/>* Class AlkaAdmin  <br \/>*  <br \/>* This class creates a very simple Options page  <br \/>*\/<br \/>class AlkaAdmin<br \/>{\/**  * The security nonce  *  * @var string  *\/<br \/>    private $_nonce = 'alka_facebook_admin'; \/**  * AlkaAdmin constructor.  *\/<br \/>    public function __construct()<br \/>    {<br \/>        add_action('admin_menu', array($this, 'addAdminMenu'));<br \/>        add_action('wp_ajax_alka_store_admin_creeds', array($this, 'storeFacebookAdminCreeds'));<br \/>        add_action('admin_enqueue_scripts', array($this, 'addAdminScripts'));<br \/>    }<br \/>} <br \/><br \/>\/** Starts our admin class, easy! *\/<br \/>new AlkaAdmin();<br \/><br \/><\/pre>\n\n\n<p>So as you can see our class&#8217;s constructor will call 3 main methods:\u00a0addAdminMenu,\u00a0storeFacebookAdminCreeds and\u00a0addAdminScripts.<\/p>\n\n\n<p>Firstly, we use\u00a0addAdminMenu<strong> <\/strong>to register our new page for WordPress:<\/p>\n\n\n<pre class=\"wp-block-preformatted\">\/**\n * Adds Alka to WordPress Admin Sidebar Menu\n *\/\npublic function addAdminMenu() {\n    add_menu_page(\n        __( 'Alka Facebook', 'alkaweb' ),\n        __( 'Alka Facebook', 'alkaweb' ),\n        'manage_options',\n        'alka_facebook',\n        array( $this, 'adminlayout' ),\n        ''\n    );\n}<\/pre>\n\n\n<p>As you can see, there is another callback to a new method (<g class=\"gr_ gr_6 gr-alert gr_spell gr_inline_cards gr_run_anim ContextualSpelling ins-del multiReplace\" id=\"6\" data-gr-id=\"6\">adminlayout<\/g>) that will handle the HTML displayed within this page. You can load <g class=\"gr_ gr_9 gr-alert gr_gramm gr_inline_cards gr_disable_anim_appear Grammar multiReplace\" id=\"9\" data-gr-id=\"9\"><g class=\"gr_ gr_5 gr-alert gr_spell gr_inline_cards gr_run_anim ContextualSpelling ins-del\" id=\"5\" data-gr-id=\"5\">an other<\/g><\/g> file to make your plugin even cleaner. <\/p>\n\n\n<p>For the sake of simplicity, the HTML will be loaded within the class method (<g class=\"gr_ gr_7 gr-alert gr_spell gr_inline_cards gr_run_anim ContextualSpelling\" id=\"7\" data-gr-id=\"7\">boooo<\/g>&#8230;)<\/p>\n\n\n<pre class=\"wp-block-preformatted\">\/**\n * Outputs the Admin Dashboard layout\n *\/\npublic function adminlayout() {\n    $facebook_creeds = AlkaFacebook::getCredentials();\n    $alka_app_id = (isset($facebook_creeds['app_id']) &amp;&amp; !empty($facebook_creeds['app_id'])) ? $facebook_creeds['app_id'] : '';\n    $alka_app_secret = (isset($facebook_creeds['app_secret']) &amp;&amp; !empty($facebook_creeds['app_secret'])) ? $facebook_creeds['app_secret'] : '';\n    ?&gt;\n    &lt;div class=\"wrap\"&gt;\n        &lt;h3&gt;&lt;?php _e( 'Facebook API Settings', 'alkaweb' ); ?&gt;&lt;\/h3&gt;\n        &lt;table class=\"form-table\"&gt;\n            &lt;tbody&gt;\n            &lt;tr&gt;\n                &lt;td&gt;\n                    &lt;label&gt;&lt;?php _e( 'Your callback url', 'alkaweb' ); ?&gt;&lt;\/label&gt;\n                &lt;\/td&gt;\n                &lt;td&gt;\n                    &lt;span class=\"highlight\"&gt;&lt;?php echo AlkaFacebook::getCallbackUrl(); ?&gt;&lt;\/span&gt;\n                &lt;\/td&gt;\n            &lt;\/tr&gt;\n            &lt;tr&gt;\n                &lt;td scope=\"row\"&gt;\n                    &lt;label&gt;&lt;?php _e( 'Facebook App ID', 'alkaweb' ); ?&gt;&lt;\/label&gt;\n                &lt;\/td&gt;\n                &lt;td&gt;\n                    &lt;input id=\"alka-fb-app-id\" class=\"regular-text\" value=\"&lt;?php echo $alka_app_id; ?&gt;\"\/&gt;\n                &lt;\/td&gt;\n            &lt;\/tr&gt;\n            &lt;tr&gt;\n                &lt;td&gt;\n                    &lt;label&gt;&lt;?php _e( 'Facebook App Secret', 'alkaweb' ); ?&gt;&lt;\/label&gt;\n                &lt;\/td&gt;\n                &lt;td&gt;\n                    &lt;input id=\"alka-fb-app-secret\" class=\"regular-text\" value=\"&lt;?php echo $alka_app_secret; ?&gt;\"\/&gt;\n                &lt;\/td&gt;\n            &lt;\/tr&gt;\n            &lt;tr&gt;\n                &lt;td colspan=\"2\"&gt;\n                    &lt;button class=\"button button-primary\" id=\"alkaweb-facebook-details\"&gt;&lt;?php _e( 'Submit', 'alkaweb' ); ?&gt;&lt;\/button&gt;\n                &lt;\/td&gt;\n            &lt;\/tr&gt;\n            &lt;\/tbody&gt;\n        &lt;\/table&gt;\n    &lt;\/div&gt;\n    &lt;?php\n}<\/pre>\n\n\n<p>The 2 static methods we call from the AlkaFacebook class (see part 1 of this tutorial) will be defined later:<\/p>\n\n\n<ul><li><em>AlkaFacebook::getCredentials()<\/em> returns the saved credentials from the database as an array<\/li><li><em>AlkaFacebook::getCallbackUrl() <\/em>returns the callback URL that <em>must<\/em><strong><em> <\/em><\/strong>be provided\u00a0\u00a0to Facebook through the app portal<\/li><\/ul>\n\n\n<p>Once this done, we can enjoy a clean admin page for our plugin:<\/p>\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><img src=\"https:\/\/alka-web.com\/wp\/wp-content\/uploads\/2017\/09\/Alka_Facebook_\u2039_WP_dev_\u2014_WordPress.jpg\" alt=\"\" class=\"wp-image-573\"\/><\/figure><\/div>\n\n\n<p>But nothing happen when we click the save button so far, which is (let&#8217;s be honest) quite an issue!<\/p>\n\n\n<p>In order to save the data, we&#8217;ll add a javaScript file to the WordPress admin using the method: <em>addAdminScripts().<\/em> This file will just &#8220;listen&#8221; to the admin actions, whenever the button is pushed, a request is made to your server. WordPress will redirect the request to our class&#8217;s method\u00a0<em>storeFacebookAdminCreeds()<\/em>. That easy.<\/p>\n\n\n<p>We enqueue our new javaScript file:\u00a0<em>assets\/js\/admin.js<\/em> (you need to create it) using our constant define earlier.<\/p>\n\n\n<pre class=\"wp-block-preformatted\">\/**\n * Adds Admin Scripts for the Ajax call\n *\/\npublic function addAdminScripts() {\n    wp_enqueue_script( 'alka-facebook-admin', ALKA_FACEBOOK_URL. '\/assets\/js\/admin.js', array(), 1.0 );\n    $admin_options = array(\n        'ajax_url' =&gt; admin_url( 'admin-ajax.php' ),\n        '_nonce'   =&gt; wp_create_nonce( $this-&gt;_nonce ),\n    );\n    wp_localize_script( 'alka-facebook-admin', 'alka_facebook_admin', $admin_options );\n}<\/pre>\n\n\n<p>As you can see we also pass 2 PHP variables to our JS file using an object\u00a0 named:\u00a0<em>alka_facebook_admin<\/em><strong>.<\/strong><\/p>\n\n\n<p>We can know fill in the JavaScript file, we watch for the user click, build our request and send it using Ajax:<\/p>\n\n\n<pre class=\"wp-block-preformatted\">\/**\n * Alka Facebook Saving process\n *\/\njQuery( document ).ready( function () {\n    jQuery( document ).on( 'click', '#alkaweb-facebook-details', function ( e ) {\n        e.preventDefault();\n        var _app_id = jQuery( '#alka-fb-app-id' ).val(),\n            _app_seccret = jQuery( '#alka-fb-app-secret' ).val();\n        jQuery.ajax( {\n            url: alka_facebook_admin.ajax_url,\n            type: 'post',\n            data: {\n                action: 'alka_store_admin_creeds',\n                security: alka_facebook_admin._nonce,\n                app_id: _app_id,\n                app_secret: _app_seccret\n            },\n            success: function ( response ) {\n                alert(response);\n            }\n        } );\n    } );\n} );<\/pre>\n\n\n<p>The result is displayed through a basic <em>alert()<\/em>, but this can be changed with something more user friendly of course.<\/p>\n\n\n<p>It&#8217;s now time to save the data we received from the page in our database using a handy method:\u00a0storeFacebookAdminCreeds()\u00a0which is linked to our WordPress ajax hook:\u00a0alka_store_admin_creeds<strong>\u00a0<\/strong>sent in our request. This is possible with this action we&#8217;ve added at the beginning in our constructor:<\/p>\n\n\n<pre class=\"wp-block-preformatted\">add_action( 'wp_ajax_alka_store_admin_creeds', array( $this, 'storeFacebookAdminCreeds' ) );<\/pre>\n\n\n<p>So the method below just takes the data sent through the Ajax request, validate them and save them in the wp_options table.<\/p>\n\n\n<pre class=\"wp-block-preformatted\">\/**\n * Callback for the Ajax request\n *\n * Updates the FaceBook App ID and App Secret options\n *\/\npublic function storeFacebookAdminCreeds() {\n    if ( wp_verify_nonce( $_POST['security'], $this-&gt;_nonce ) === false ) {\n        die( 'Invalid Request!' );\n    }\n    if (\n            (isset($_POST['app_id']) &amp;&amp; !empty($_POST['app_id']))\n            &amp;&amp;\n            (isset($_POST['app_secret']) &amp;&amp; !empty($_POST['app_secret']))\n    ) {\n        update_option( 'alka_facebook', array(\n            'app_id'     =&gt; $_POST['app_id'],\n            'app_secret' =&gt; $_POST['app_secret'],\n        ) );\n    }\n    echo __('Saved!', 'Alkaweb');\n    die();\n}<\/pre>\n\n\n<p>That&#8217;s it! We can now receive and save the Facebook App ID as well as the Facebook App Secret from the WordPress admin dashboard. <em>Cool!&nbsp;<\/em><\/p>\n\n\n<p>We now need to update the AlkaFacebook.php class defined in<g class=\"gr_ gr_4 gr-alert gr_gramm gr_inline_cards gr_run_anim Grammar only-del replaceWithoutSep\" id=\"4\" data-gr-id=\"4\"> part<\/g> 1 of this tutorial to no longer use private attributes but rather our saved option. In order to get the Facebook App ID and secret.<\/p>\n\n\n<p>In the same way, we will create the method that returns the site callback url for Facebook (which was also an attribute before):<\/p>\n\n\n<pre class=\"wp-block-preformatted\">\/**\n * Returns the Facebook credentials as an array containing app_id and app_secret\n *\n * @return array\n *\/\nstatic function getCredentials() {\n   return get_option( 'alka_facebook', array() );\n}\n\/**\n * Returns the callback URL\n *\n * @return string\n *\/\nstatic function getCallbackUrl() {\n   return get_admin_url( null, 'admin-ajax.php?action=alka_facebook' );\n}<\/pre>\n\n\n<p>We can now use them by re-defining our methods within the same class:<\/p>\n\n\n<pre class=\"wp-block-preformatted\">\/**\n * Login URL to Facebook API\n *\n * @return string\n *\/\nprivate function getLoginUrl() {\n    if(!session_id()) {\n        session_start();\n    }\n    $fb = $this-&gt;initApi();\n    $helper = $fb-&gt;getRedirectLoginHelper();\n    \/\/ Optional permissions\n    $permissions = ['email'];\n    $url = $helper-&gt;getLoginUrl(self::getCallbackUrl(), $permissions);\n    return esc_url($url);\n}<\/pre>\n\n\n<p>And lastly, for the credentials:<\/p>\n\n\n<pre class=\"wp-block-preformatted\">\/**\n * Init the API Connection\n *\n * @return Facebook\n *\/\nprivate function initApi() {\n   $credentials = self::getCredentials();\n   \/\/ Only if we have some credentials, ideally an Exception would be thrown here\n   if(!isset($credentials['app_id']) || !isset($credentials['app_secret']))\n      return null;\n    $facebook = new Facebook([\n        'app_id' =&gt; $credentials['app_id'],\n        'app_secret' =&gt; $credentials['app_secret'],\n        'default_graph_version' =&gt; 'v2.2',\n        'persistent_data_handler' =&gt; 'session'\n    ]);\n    return $facebook;\n}<\/pre>\n\n\n<p>Done! Our API connection is now using our options from the plugin&#8217;s options page.<\/p>\n\n\n<p>You can test on your side to make sure it&#8217;s working as expected.<\/p>\n\n\n<h2>Improvement 2: sending the email to the user<\/h2>\n\n\n<p>For this one, you will need server to get the email sent as your Localhost probably don&#8217;t have any email driver.<\/p>\n\n\n<p>We are simply gonna add a new method in&nbsp;<strong>createUser()<\/strong> method after the meta and before we log&nbsp;in the user.<\/p>\n\n\n<pre class=\"wp-block-preformatted\">\/\/ Setting the meta\nupdate_user_meta( $new_user_id, 'first_name', $fb_user['first_name'] );\nupdate_user_meta( $new_user_id, 'last_name', $fb_user['last_name'] );\nupdate_user_meta( $new_user_id, 'user_url', $fb_user['link'] );\nupdate_user_meta( $new_user_id, 'alka_facebook_id', $fb_user['id'] );\n\/\/ Send a validation email\n$this-&gt;sendConfirmation($username, $password, $fb_user['email']);\n\/\/ Log the user ?\nwp_set_auth_cookie( $new_user_id );<\/pre>\n\n\n<p>Now, it&#8217;s time to create this new method in our AlkaFacebook class:<\/p>\n\n\n<pre class=\"wp-block-preformatted\">\/**\n * Sends a confirmation email to the new user\n *\n * @param string $username\n * @param string $password\n * @param string $email\n *\/\nprivate function sendConfirmation($username, $password, $email) {\n    $subject = __('Welcome! Your account has been created!', 'alkaweb');\n    $headers = array('Content-Type: text\/html; charset=UTF-8');\n    $body = '';\n    $body .= __('Your friends from', 'alkaweb') . ': &lt;a href=\"' . get_site_url() . '\"&gt;' . get_site_url() . '&lt;\/a&gt;&lt;br&gt;';\n    $body .= __('We are please to announce that your account has been successfully created!', 'alkaweb') . '&lt;\/br&gt;';\n    $body .= __('You can login at anytime with your Facebook account, you can also always use the following credentials', 'alkaweb') .': &lt;br&gt;';\n    $body .= __('User', 'alkaweb') . ': &lt;b&gt;' . $username . '&lt;\/b&gt;&lt;br&gt;';\n    $body .= __('Password', 'alkaweb') . ': &lt;b&gt;' . $password . '&lt;\/b&gt;&lt;br&gt;&lt;br&gt;';\n    $body .= __('Thanks', 'alkaweb');\n    wp_mail( $email, $subject, $body, $headers );\n}<\/pre>\n\n\n<p>We simply use the <em>wp_mail() <\/em>function from WordPress to do the job for us. This function requires 4 parameters, you can find all the details on the <a rel=\"noreferrer noopener\" href=\"https:\/\/developer.wordpress.org\/reference\/functions\/wp_mail\/\" target=\"_blank\">documentation page<\/a> related to that function.<\/p>\n\n\n<p>You are free to customize the content and even design your own template. Note that we pass the username, password and email as method arguments to be sure we send the right data.<\/p>\n\n\n<h2>Improvement 3: designing our button<\/h2>\n\n\n<p>In part 1, the shortcode was just displaying a simple link, we&#8217;ll create a brand new button that&#8217;d impress any of your visitor.<\/p>\n\n\n<p>The first thing we want to do it to change the shortcode&#8217;s HTML output:<\/p>\n\n\n<pre class=\"wp-block-preformatted\">\/**\n * Render the shortcode [alka_facebook\/]\n *\n * It displays our Login \/ Register button\n *\/\npublic function renderShortcode() {\n    \/\/... Same as Part 1\n    \/\/ Button\n    $logo = '&lt;img src=\"'. ALKA_FACEBOOK_URL. '\/assets\/images\/fb-logo.png\" alt=\"Facebook logo\"&gt;';\n    $html .= '&lt;a href=\"'.$this-&gt;getLoginUrl().'\" class=\"btn\" id=\"alka-facebook-button\"&gt;'. $logo . $button_label .'&lt;\/a&gt;';\n    $html .= '&lt;\/div&gt;';\n    \/\/ Write it down\n    return $html;\n}<\/pre>\n\n\n<p>As you can see we&#8217;re adding a new icon, which can done be downloaded from the <a rel=\"noreferrer noopener\" href=\"https:\/\/en.facebookbrand.com\/assets\" target=\"_blank\">Facebook Brand Resources<\/a> page. Pick up any icon from the .zip your download (possibly a white one) and place it in assets\/images\/, renamed as fb-logo.png.<\/p>\n\n\n<p>We can also create a new css file\u00a0assets\/css\/button-style.css:<\/p>\n\n\n<pre class=\"wp-block-preformatted\">\/**\n * CSS for the Alka Facebook plugin\n *\/\n#alka-facebook-wrapper{\n    margin: 20px 0;\n}\n#alka-facebook-wrapper a#alka-facebook-button{\n    color: #FFF;\n    background: #3b5998;\n    border-radius: 5px;\n    box-shadow: 0 5px 0 0 #091e57;\n    padding: 10px 30px 20px 30px;\n    text-decoration: none;\n    display: inline-block;\n}\n#alka-facebook-wrapper a#alka-facebook-button img{\n    box-shadow: none;\n    width: 30px;\n    padding-right: 30px;\n    box-sizing: content-box;\n    display: inline-block;\n    position: relative;\n    bottom: -10px;\n}<\/pre>\n\n\n<p>We now need to add our new css file whenever the page is loader. Similarly to the admin side, we just create a new action in the AlkaFacebook class&#8217;s constructor<\/p>\n\n\n<pre class=\"wp-block-preformatted\">\/\/ Add our button css file\nadd_action( 'wp_enqueue_scripts', array($this, 'addButtonCSS'));<\/pre>\n\n\n<p>So it looks like:<\/p>\n\n\n<pre class=\"wp-block-preformatted\">\/**\n * AlkaFacebook constructor.\n *\/\npublic function __construct()\n{\n    \/\/ We register our shortcode\n    add_shortcode( 'alka_facebook', array($this, 'renderShortcode') );\n    \/\/ Start the session\n    add_action( 'template_redirect', array($this, 'sessionInit') );\n    \/\/ Callback URL\n    add_action( 'wp_ajax_alka_facebook', array($this, 'apiCallback'));\n    add_action( 'wp_ajax_nopriv_alka_facebook', array($this, 'apiCallback'));\n    \/\/ Add our button css file\n    add_action( 'wp_enqueue_scripts', array($this, 'addButtonCSS'));\n}<\/pre>\n\n\n<p>We just have to enqueue the stylesheet with the method:\u00a0addButtonCSS()<\/p>\n\n\n<pre class=\"wp-block-preformatted\">\/**\n * Enqueue the plugin's css file\n *\/\npublic function addButtonCSS() {\n    wp_enqueue_style( 'alka-facebook-button', ALKA_FACEBOOK_URL. '\/assets\/css\/button-style.css' );\n}<\/pre>\n\n\n<p>Here again, we are making great use of the constants defined at the beginning of this tutorial.<\/p>\n\n\n<p>This is the expected result on a new page called &#8220;Facebook&#8221; containing only the shortcode. On the default WordPress theme:<\/p>\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><img src=\"https:\/\/alka-web.com\/wp\/wp-content\/uploads\/2017\/10\/Facebook_\u2013_WP_dev.jpg\" alt=\"\" class=\"wp-image-578\"\/><\/figure><\/div>\n\n\n<p>Lastly, regarding the Facebook avatar<strong>\u00a0<\/strong>and how to get it upon registration, well we didn&#8217;t build it in this part for a simple reason. As or right now, I have looked several plugins doing so and I find the process very &#8220;barbarian&#8221;. It&#8217;s just a filter on the <em>get_avatar()<\/em> <g class=\"gr_ gr_14 gr-alert gr_gramm gr_inline_cards gr_disable_anim_appear Style multiReplace\" id=\"14\" data-gr-id=\"14\">function\u00a0 to<\/g> replace the path with a link to Facebook containing the user ID. Simply because it&#8217;s managed by Gravatar on WordPress. It&#8217;d be better, if we do it, to focus only on BuddyPress as <g class=\"gr_ gr_13 gr-alert gr_spell gr_inline_cards gr_disable_anim_appear ContextualSpelling multiReplace\" id=\"13\" data-gr-id=\"13\">their<\/g> is a deeper avatar integration. With an upload process for example, which is not here by default on WordPress.<\/p>\n\n\n<p>Any question? Fire away in the comments \ud83d\ude42<\/p>\n","protected":false},"excerpt":{"rendered":"<p>As promised, here is the part 2 of our tutorial to create a Facebook WordPress plugin. Thanks a lot for your feedback. Be sure to checkout part 1 before Before starting off, a special thanks to&nbsp;Ovidiu Turean who made a [&hellip;]<\/p>\n","protected":false},"author":1,"featured_media":588,"comment_status":"closed","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[5],"tags":[11,15,16],"_links":{"self":[{"href":"https:\/\/woffice.io\/wp-json\/wp\/v2\/posts\/565"}],"collection":[{"href":"https:\/\/woffice.io\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/woffice.io\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/woffice.io\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/woffice.io\/wp-json\/wp\/v2\/comments?post=565"}],"version-history":[{"count":1,"href":"https:\/\/woffice.io\/wp-json\/wp\/v2\/posts\/565\/revisions"}],"predecessor-version":[{"id":5665,"href":"https:\/\/woffice.io\/wp-json\/wp\/v2\/posts\/565\/revisions\/5665"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/woffice.io\/wp-json\/wp\/v2\/media\/588"}],"wp:attachment":[{"href":"https:\/\/woffice.io\/wp-json\/wp\/v2\/media?parent=565"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/woffice.io\/wp-json\/wp\/v2\/categories?post=565"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/woffice.io\/wp-json\/wp\/v2\/tags?post=565"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}