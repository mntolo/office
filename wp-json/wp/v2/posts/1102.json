{"id":1102,"date":"2019-02-21T13:24:38","date_gmt":"2019-02-21T13:24:38","guid":{"rendered":"https:\/\/alkalab.com\/?p=1102"},"modified":"2021-03-26T04:24:54","modified_gmt":"2021-03-26T04:24:54","slug":"buddypress-members-map","status":"publish","type":"post","link":"https:\/\/woffice.io\/buddypress-members-map\/","title":{"rendered":"How To Create a BuddyPress Members Map With Vue.js"},"content":{"rendered":"\n<p>Let&#8217;s create our BuddyPress Members Map using Vue.js.<\/p>\n\n\n<p>Welcome to you. <\/p>\n\n\n<p>This article will explain to you how to create a fully dynamic Google Maps of your BuddyPress Members on your WordPress site, on any page.  <\/p>\n\n\n<p>Easily. <\/p>\n\n\n<p>This tutorial is developed as we roll out this feature to our <a href=\"https:\/\/woffice.io?ref=alkaweb\">Woffice theme,\u00a0i<\/a>ntranet\/extranet WordPress solution. <\/p>\n\n\n<p>It already has a members map but it was: <\/p>\n\n\n<ul class=\"is-style-checkbox\"><li>1. Not dynamic. <\/li><li>2. Using old jQuery code.<\/li><\/ul>\n\n\n<p>So time for a fresh look! <\/p>\n\n\n<p>To follow this tutorial you need: <\/p>\n\n\n<ul><li>A <a href=\"https:\/\/wordpress.org\" target=\"_blank\" rel=\"noopener\">WordPress<\/a> setup with <a class=\"\" href=\"https:\/\/buddypress.org\" target=\"_blank\" rel=\"noopener\"><g class=\"gr_ gr_17 gr-alert gr_gramm gr_inline_cards gr_run_anim Punctuation only-ins replaceWithoutSep\" id=\"17\" data-gr-id=\"17\">BuddyPress<\/g><\/a> installed <\/li><li> PHP skills (OOP as well) but also WordPress development skills<\/li><li><a href=\"https:\/\/vuejs.org\" target=\"_blank\" rel=\"noopener\">Vue.js<\/a> skills (at least the basics)<\/li><li>A Google cloud account to use the Maps JavaScript V3 API (<strong>to render the map<\/strong>) and Map Geolocation API (<strong>to convert locations into coordinates<\/strong>)<\/li><\/ul>\n\n\n<p>We have split this tutorial into two parts: Backend &amp; Frontend. <\/p>\n\n\n<p>Makes sense right? <\/p>\n\n\n<p>Nothing new here. You will see it is pretty straightforward.<\/p>\n\n\n<p>Before we start, this is developed within a theme, so designed for <a href=\"https:\/\/codex.wordpress.org\/Child_Themes\" target=\"_blank\" rel=\"noopener\">a child theme<\/a> if you do not have your own theme, but it can also be used a plugin with a couple of changes.  <\/p>\n\n\n<p>Also, the final<em> (working!)<\/em> result can be found as a Zipped archive at the bottom of this page.<br \/><br \/><em>Last but not least, lots of functions will be prefixed <\/em><strong><em>woffice_<\/em><\/strong>, <em>change that with your own prefix<\/em>.<br \/><br \/>Enough talking! Let&#8217;s get started.<\/p>\n\n\n<h2>Part I: Create The Backend Side <\/h2>\n\n\n<p>In this first part of our BuddyPress Member Map tutorial, we will create our PHP Class to handle everything in this tutorial in one single place. <\/p>\n\n\n<p>Then, create the Location field to collect the member&#8217;s address. Store it safely. Once done, we will have an Ajax callback setup (which will be called by our Frontend Vue.Js component). <\/p>\n\n\n<p>And we&#8217;ll optimize it to use as <g class=\"gr_ gr_6 gr-alert gr_gramm gr_inline_cards gr_run_anim Grammar multiReplace\" id=\"6\" data-gr-id=\"6\">less<\/g> requests as possible (using some home-made cache).<\/p>\n\n\n<h3>Getting The Member&#8217;s Location<\/h3>\n\n\n<p>Firstly, let&#8217;s ask a quick question: How can we collect the user&#8217;s location, easily? <\/p>\n\n\n<p>No idea. Com&#8217;on<g class=\"gr_ gr_15 gr-alert gr_gramm gr_inline_cards gr_run_anim Punctuation multiReplace\" id=\"15\" data-gr-id=\"15\">&#8230;.<\/g> Remember, we are teaming up with BuddyPress on this, so let&#8217;s use it! BuddyPress has a nice extension named: <g class=\"gr_ gr_8 gr-alert gr_spell gr_inline_cards gr_disable_anim_appear ContextualSpelling ins-del multiReplace\" id=\"8\" data-gr-id=\"8\"><g class=\"gr_ gr_8 gr-alert gr_spell gr_inline_cards gr_run_anim ContextualSpelling ins-del multiReplace\" id=\"8\" data-gr-id=\"8\"><g class=\"gr_ gr_8 gr-alert gr_spell gr_inline_cards gr_run_anim ContextualSpelling ins-del multiReplace\" id=\"8\" data-gr-id=\"8\">xProfile<\/g><\/g><\/g>. <\/p>\n\n\n<p>You can activate it from the<strong> Settings &gt; BuddyPress &gt; Components screen<\/strong>. <br \/><\/p>\n\n\n<p>We are going to wrap all our PHP code in a class: <strong>Woffice_Members_Map<\/strong>, again change Woffice with your theme\/plugin&#8217;s name. This class can be called from any PHP file, ideally functions.php (child or parent theme): <\/p>\n\n\n<p><em>new Woffice_Members_Map();<\/em><\/p>\n\n\n<p>We will simply create a method that will be attached to the <em>`xprofile_updated_profile`&nbsp;<\/em>BuddyPress action, so our code will be executed whenever someone saves its profile. <\/p>\n\n\n<p>We avoid using bp_init. <\/p>\n\n\n<p>Because otherwise it&#8217;s being run on every page load. <strong>However, it means you need to save your profile to generate the field.<\/strong> Feel free to use any other specific action, like on theme activation. <\/p>\n\n\n<p>Once hooked, we run a SQL query to see if the Location field exists and otherwise we create it. <\/p>\n\n\n<p>Plain and simple. <\/p>\n\n\n<div class=\"wp-block-coblocks-gist\"><script src=\"https:\/\/gist.github.com\/2Fwebd\/5e75d6bb81f80277eb6cb4af1018d10c.js\"><\/script><noscript><a href=\"https:\/\/gist.github.com\/2Fwebd\/5e75d6bb81f80277eb6cb4af1018d10c\" target=\"_blank\" rel=\"noopener\">View this gist on GitHub<\/a><\/noscript><\/div>\n\n\n<p>That will (<em>should<\/em>) give you a new field when you edit your BuddyPress profile. &#8220;Location&#8221;, it will hold the member&#8217;s location inside our database.  <\/p>\n\n\n<h3>Saving The Coordinates in Our Database<\/h3>\n\n\n<p>We now have nice locations getting saved, but Google Map does not eat this kind of food. The diet is Geographic coordinates. <\/p>\n\n\n<p>Therefore, how do we get coordinates from human-wrote locations? <br \/><br \/>Well, we use the Google API: <strong><a rel=\"noreferrer noopener\" aria-label=\"Google Maps Geocoding API (opens in a new tab)\" href=\"https:\/\/developers.google.com\/maps\/documentation\/geocoding\/intro\" target=\"_blank\">Google Maps Geocoding API<\/a><\/strong>. <\/p>\n\n\n<p>This API turns addresses into coordinates. <\/p>\n\n\n<p>So you need to create a new Google Cloud Account (if you do not have one yet), create a new project called &#8220;Members Map&#8221; and activate this API. You can also enable the JavaScript map API as well. We will need it later on. Once both APIs created, generate API keys from the <strong>Credentials<\/strong> screen. <\/p>\n\n\n<p>We need those. <br \/><\/p>\n\n\n<p>Here is our Woffice theme&#8217;s doc article about how to get them: <br \/><a href=\"https:\/\/alkaweb.atlassian.net\/wiki\/spaces\/WOF\/pages\/4227317\/Google+Map+Geocoding\" target=\"_blank\" rel=\"noopener\">Google Map Geocoding<\/a><\/p>\n\n\n<p>Then, we will save all coordinates inside our database, within the <em>wp_options<\/em> table. As a new option. <\/p>\n\n\n<p>Why?  <\/p>\n\n\n<p>Because requests are expensive to this API. <\/p>\n\n\n<p>Thus, the idea is to call it only when needed, so if we already have the coordinates for one member, we don&#8217;t need it again, unless, of course, it&#8217;s being updated. <\/p>\n\n\n<p>The option name in this example will be: &#8220;<em>woffice_map_locations<\/em>&#8220;. The data inside is formatted using JSON. <\/p>\n\n\n<p>Let&#8217;s do it! Three new methods in our PHP Class: <\/p>\n\n\n<ul><li><strong>saveSingleMember()<\/strong> which is hooked to the `<em>xprofile_updated_profile<\/em>` action, so whenever a new member profile is saved, we will see if there is an existing entry in our option and if not, fetch the coordinates. Same if it&#8217;s being updated.  <\/li><li><strong>getMemberCoordinates()<\/strong> which will fetch the Coordinates for a given member. That&#8217;s where we will call the API and the BuddyPress <g class=\"gr_ gr_529 gr-alert gr_spell gr_inline_cards gr_disable_anim_appear ContextualSpelling ins-del multiReplace\" id=\"529\" data-gr-id=\"529\">xProfile<\/g> field. <\/li><li><strong>apiRequest()&nbsp;<\/strong>is a helper to call the API and returns the result.  <\/li><\/ul>\n\n\n<div class=\"wp-block-coblocks-gist\"><script src=\"https:\/\/gist.github.com\/2Fwebd\/c12144c7e330246fa25ad1a27c267a71.js\"><\/script><noscript><a href=\"https:\/\/gist.github.com\/2Fwebd\/c12144c7e330246fa25ad1a27c267a71\" target=\"_blank\" rel=\"noopener\">View this gist on GitHub<\/a><\/noscript><\/div>\n\n\n<p><em>Notes<\/em>:<br \/><\/p>\n\n\n<ul><li>We split into 3 methods because if you want to use a more complex workflow, some methods can be reused independently. Like having a button that regenerates all coordinates, we do that in Woffice and you don&#8217;t need the first method but the other two. <\/li><li>We are using a Class attribute ($privateApiKey) to hold the API key, if you have a Theme Settings page, get it from there.<\/li><\/ul>\n\n\n<p>Cool! <\/p>\n\n\n<p>So now, we can save addresses in our profile and get coordinates saved inside our database. <\/p>\n\n\n<p>That really is all we need ? Here is an example of the result in the Database: <\/p>\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><img src=\"https:\/\/alkalab.com\/wp\/wp-content\/uploads\/2019\/02\/MySQL_5_7_23__localhost_eonet_dev_wp_options.jpg\" alt=\"Database preview\" class=\"wp-image-1138\"\/><\/figure><\/div>\n\n\n<h3>Creating The Ajax callback<\/h3>\n\n\n<p><g class=\"gr_ gr_49 gr-alert gr_gramm gr_inline_cards gr_run_anim Grammar only-ins replaceWithoutSep\" id=\"49\" data-gr-id=\"49\">Third<\/g> step, the goal of this part is to make the coordinates we just saved inside our <em>wp_options<\/em> table available from the Frontend side, safely. Of course. <br \/><br \/>In the <strong>__construct()<\/strong> method, let&#8217;s add our Ajax callback functions: <br \/><\/p>\n\n\n<div class=\"wp-block-coblocks-gist\"><script src=\"https:\/\/gist.github.com\/2Fwebd\/fa12bb2e0991416428eacc82ccbdb0a9.js\"><\/script><noscript><a href=\"https:\/\/gist.github.com\/2Fwebd\/fa12bb2e0991416428eacc82ccbdb0a9\" target=\"_blank\" rel=\"noopener\">View this gist on GitHub<\/a><\/noscript><\/div>\n\n\n<p>If you are not comfortable with how WordPress handles Ajax requests, please have a look at <a href=\"https:\/\/codex.wordpress.org\/AJAX_in_Plugins\" target=\"_blank\" rel=\"noopener\">this article<\/a>. <br \/><\/p>\n\n\n<p>Also, we are using a <a href=\"https:\/\/codex.wordpress.org\/WordPress_Nonces\" target=\"_blank\" rel=\"noopener\">WordPress nonce<\/a> to make the request safer and make it can only be sent through our Vue.js component.<br \/><br \/>Here is the <strong>loadMembers()<\/strong> method that we can add in our class: <\/p>\n\n\n<div class=\"wp-block-coblocks-gist\"><script src=\"https:\/\/gist.github.com\/2Fwebd\/09283d0373b4e9e5b193f57c291fd826.js\"><\/script><noscript><a href=\"https:\/\/gist.github.com\/2Fwebd\/09283d0373b4e9e5b193f57c291fd826\" target=\"_blank\" rel=\"noopener\">View this gist on GitHub<\/a><\/noscript><\/div>\n\n\n<p>As you can see, we are also adding a `<em>woffice_members_map_locations<\/em>` filter to let any child theme or plugin add custom data to the response using a WordPress filter. <\/p>\n\n\n<p>There is also a default response if there <g class=\"gr_ gr_4 gr-alert gr_gramm gr_inline_cards gr_run_anim Grammar multiReplace\" id=\"4\" data-gr-id=\"4\">is<\/g> no coordinates found. <\/p>\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n<p>Part I is over! As of right now, the backend part is done. No more PHP, well, almost. Here is a quick recap of what we&#8217;ve done: <br \/><\/p>\n\n\n<ol><li>Insert automatically a new BuddyPress xProfile field in the user&#8217;s profile page to collect the Location. <\/li><li>Use the Geocoding API to turn this Location into GPS coordinates and saved them inside our database in the wp_options table as a new option to save requests.<\/li><li>Created an Ajax callback to return the saved coordinates as a formatted array.<\/li><\/ol>\n\n\n<p>Real cakewalk ?<\/p>\n\n\n<h2>Part II: Create The Frontend Side <\/h2>\n\n\n<p>What we will do in this part will be to create the Vue.js component, define it, register it and call it with a PHP function. <br \/><br \/>The goal of the component is to wrap everything in a single Vue.js component (that&#8217;s the real magic!), no dependency, just this component. Once the component loaded, it will do three pretty cool, yet simple things:  <br \/><\/p>\n\n\n<ol><li>Create the Google Map<\/li><li>Fetch the Members coordinates <\/li><li>Render the Members into the map<\/li><\/ol>\n\n\n<h3>Define Our Vue.js Component <\/h3>\n\n\n<p>First off, create a new file called <em>js\/wofficeMembersMap.js<\/em>, it will hold our Vue.js component. <\/p>\n\n\n<p>We will &#8220;<a href=\"https:\/\/developer.wordpress.org\/reference\/functions\/wp_enqueue_script\/\" target=\"_blank\" rel=\"noopener\">enqueue<\/a>&#8221; it to the page&#8217;s footer within our <strong>__contstruct()<\/strong> method: <\/p>\n\n\n<div class=\"wp-block-coblocks-gist\"><script src=\"https:\/\/gist.github.com\/2Fwebd\/23e528a34dc1343c10269e59de2b3739.js\"><\/script><noscript><a href=\"https:\/\/gist.github.com\/2Fwebd\/23e528a34dc1343c10269e59de2b3739\" target=\"_blank\" rel=\"noopener\">View this gist on GitHub<\/a><\/noscript><\/div>\n\n\n<p>And therefore, also add a new method to register both the library and our component: <\/p>\n\n\n<div class=\"wp-block-coblocks-gist\"><script src=\"https:\/\/gist.github.com\/2Fwebd\/7a0f06139205dc7eca723d1dd1e3caf3.js\"><\/script><noscript><a href=\"https:\/\/gist.github.com\/2Fwebd\/7a0f06139205dc7eca723d1dd1e3caf3\" target=\"_blank\" rel=\"noopener\">View this gist on GitHub<\/a><\/noscript><\/div>\n\n\n<p>As you can see, we are also embedding the Google JavaScript Map API. Therefore you need to create another (different one than the one used before the backend side: geocoding process) <strong>public key<\/strong>. <\/p>\n\n\n<p>Once done, register it in the class as a new attribute.<\/p>\n\n\n<div class=\"wp-block-coblocks-gist\"><script src=\"https:\/\/gist.github.com\/2Fwebd\/7b0ffa480aded7640316060b208f0795.js\"><\/script><noscript><a href=\"https:\/\/gist.github.com\/2Fwebd\/7b0ffa480aded7640316060b208f0795\" target=\"_blank\" rel=\"noopener\">View this gist on GitHub<\/a><\/noscript><\/div>\n\n\n<p>Once that&#8217;s set up, you will see both JavaScript assets loaded in your source code. Now, we can create the scaffolding of our component with our newly registered &#8220;.js&#8221; file:  <\/p>\n\n\n<div class=\"wp-block-coblocks-gist\"><script src=\"https:\/\/gist.github.com\/2Fwebd\/f1cc326d34ae1abc97583f6650e42f66.js\"><\/script><noscript><a href=\"https:\/\/gist.github.com\/2Fwebd\/f1cc326d34ae1abc97583f6650e42f66\" target=\"_blank\" rel=\"noopener\">View this gist on GitHub<\/a><\/noscript><\/div>\n\n\n<p>What are we doing here? <\/p>\n\n\n<ul><li>Creating a new Vue.js instance, that&#8217;s not a required <g class=\"gr_ gr_18 gr-alert gr_gramm gr_inline_cards gr_run_anim Punctuation only-del replaceWithoutSep\" id=\"18\" data-gr-id=\"18\">step,<\/g> if you&#8217;re using Vue.js already. Then just register the new component to this instance instead. Vue power! <\/li><li>Set up the markup, very easy here as it&#8217;s going to be rendered by Google Map, not us. <\/li><li>Registering our two component properties: height, <g class=\"gr_ gr_13 gr-alert gr_spell gr_inline_cards gr_run_anim ContextualSpelling ins-del multiReplace\" id=\"13\" data-gr-id=\"13\">url<\/g>.<\/li><li>Setting up the default Vue.js hooks that we are going to use. We could use some other ones as well, for the sake of simplicity, those 2 will do just fine! Make sure to <g class=\"gr_ gr_14 gr-alert gr_spell gr_inline_cards gr_run_anim ContextualSpelling ins-del\" id=\"14\" data-gr-id=\"14\">checkout<\/g> this<strong> must-read<\/strong> doc article from Vue.js:  <a href=\"https:\/\/vuejs.org\/v2\/guide\/instance.html#Lifecycle-Diagram\" target=\"_blank\" rel=\"noopener\">Lifecycle diagram<\/a>.  <\/li><li>Note that we are using old JavaScript markup here because we (Woffice developers) want to keep support for old browsers and care a lot about the final bundle size. But this code is easily adaptable to ES6 using Babel. Nothing tricky.   <\/li><\/ul>\n\n\n<h3>Render The Component Using PHP<\/h3>\n\n\n<p>There are several ways to display the Vue.js component, we can use a PHP function like <em>woffice_render_members_map()<\/em> and call it from a template. <\/p>\n\n\n<p>But we can also use a <a href=\"https:\/\/codex.wordpress.org\/Shortcode_API\" target=\"_blank\" rel=\"noopener\">shortcode<\/a>. Which offers the same advantages of the first method but on top of this, you can also use it right from the editor. <br \/><br \/>So, let&#8217;s create a new shortcode: <strong>[woffice_members_map]<\/strong> that you can use from your editor or using the <strong><a href=\"https:\/\/developer.wordpress.org\/reference\/functions\/do_shortcode\/\" target=\"_blank\" rel=\"noopener\">do_shortcode()<\/a><\/strong> function from your template. The other advantage is that you can pass attributes later on if you want to extend it easily. <br \/><br \/>Nothing new here, we need to register it from our <strong>__contstruct()<\/strong> method.<\/p>\n\n\n<div class=\"wp-block-coblocks-gist\"><script src=\"https:\/\/gist.github.com\/2Fwebd\/de6d6040866f82b029effa61a3bd5e75.js\"><\/script><noscript><a href=\"https:\/\/gist.github.com\/2Fwebd\/de6d6040866f82b029effa61a3bd5e75\" target=\"_blank\" rel=\"noopener\">View this gist on GitHub<\/a><\/noscript><\/div>\n\n\n<p>And then, the method itself that will simply output the Vue.js component with some HTML markup. <\/p>\n\n\n<p>We also pass attributes directly there to avoid using a &#8220;Data exchanger&#8221; (registering a JavaScript object in the <em>wp_footer<\/em> hook on the PHP level to pass data between PHP and JavaScript). <\/p>\n\n\n<div class=\"wp-block-coblocks-gist\"><script src=\"https:\/\/gist.github.com\/2Fwebd\/bc13086d22b89f592f6c79e52e9cd05a.js\"><\/script><noscript><a href=\"https:\/\/gist.github.com\/2Fwebd\/bc13086d22b89f592f6c79e52e9cd05a\" target=\"_blank\" rel=\"noopener\">View this gist on GitHub<\/a><\/noscript><\/div>\n\n\n<h3>Create The Google Map<\/h3>\n\n\n<p>At the same time, we are simply going to create a new method in our component: <strong>createMap()<\/strong>. <\/p>\n\n\n<p>Which will? &#8230; &#8230; Create the map! <\/p>\n\n\n<p>Not original, but makes sense. <\/p>\n\n\n<p>That method will set the map&#8217;s height and use the Google Map API to generate a simple map:<\/p>\n\n\n<div class=\"wp-block-coblocks-gist\"><script src=\"https:\/\/gist.github.com\/2Fwebd\/b8e9ea6070e936d3cd8a9a02dc10dec9.js\"><\/script><noscript><a href=\"https:\/\/gist.github.com\/2Fwebd\/b8e9ea6070e936d3cd8a9a02dc10dec9\" target=\"_blank\" rel=\"noopener\">View this gist on GitHub<\/a><\/noscript><\/div>\n\n\n<p>Did you notice? We are using the famous component&#8217;s data object to store the map&#8217;s zoom level and center. Feel free to improve it and use shortcode\/coordinates attributes. Moreover, you can use <a href=\"https:\/\/www.latlong.net\/\" target=\"_blank\" rel=\"noopener\">this website<\/a> to get the Latitude and Coordinates of any address. <\/p>\n\n\n<p>This is a VERY simple example, you can make it a LOT more complex (custom style, custom controls, animations&#8230;). <\/p>\n\n\n<p>Google showcases an\u00a0<a href=\"https:\/\/developers.google.com\/maps\/documentation\/javascript\/tutorial\" target=\"_blank\" rel=\"noopener\">excellent documentation<\/a> on this API. So when you use <strong>[woffice_members_map] <\/strong>in\u00a0any post or page, you should (will, I hope) see:<\/p>\n\n\n<figure class=\"wp-block-image\"><img src=\"https:\/\/alkalab.com\/wp\/wp-content\/uploads\/2019\/02\/Shortcode_tuto_\u2013_Eonet_Dev-1024x511.jpg\" alt=\"Tutorial Preview\" class=\"wp-image-1139\"\/><\/figure>\n\n\n<h3>Fetch Our Members<\/h3>\n\n\n<p>Okay, so we have a map. <\/p>\n\n\n<p>How about we now call the Ajax callback we have defined in the first step to fetch our Members coordinates from our database and render them? Sounds good. <br \/><br \/>Update the <strong>mounted()<\/strong> hooks to call a new method that we will define under the <strong>methods: {}<\/strong> object: <\/p>\n\n\n<div class=\"wp-block-coblocks-gist\"><script src=\"https:\/\/gist.github.com\/2Fwebd\/8b0e952557593722bc767836cc2d7b17.js\"><\/script><noscript><a href=\"https:\/\/gist.github.com\/2Fwebd\/8b0e952557593722bc767836cc2d7b17\" target=\"_blank\" rel=\"noopener\">View this gist on GitHub<\/a><\/noscript><\/div>\n\n\n<div class=\"wp-block-coblocks-gist\"><script src=\"https:\/\/gist.github.com\/2Fwebd\/0f8e147124709fa6435e16365a62255b.js\"><\/script><noscript><a href=\"https:\/\/gist.github.com\/2Fwebd\/0f8e147124709fa6435e16365a62255b\" target=\"_blank\" rel=\"noopener\">View this gist on GitHub<\/a><\/noscript><\/div>\n\n\n<p>Couple of things to notice here: <\/p>\n\n\n<p>Firstly, we are using a &#8220;WordPress nonce&#8221; to secure the request.  <\/p>\n\n\n<p>Secondly, we store the fetched members coordinates in the <em>data<\/em> object to be able to use it easily in any other method of our component. <\/p>\n\n\n<p>Once done, we call a new method: <strong>drawMarkers()<\/strong>. <\/p>\n\n\n<p>See the next section ?<\/p>\n\n\n<p>Last but not least, install the <a href=\"https:\/\/chrome.google.com\/webstore\/detail\/vuejs-devtools\/nhdogjmejiglipccpnnnanhbledajbpd?hl=en\" target=\"_blank\" rel=\"noopener\">Vue.js dev tool<\/a>. You will be able to visualize the data: <\/p>\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><img src=\"https:\/\/alkalab.com\/wp\/wp-content\/uploads\/2019\/02\/Shortcode_tuto_\u2013_Eonet_Dev-1-1024x532.jpg\" alt=\"First Preview of our Map in Woffice\" class=\"wp-image-1141\"\/><\/figure><\/div>\n\n\n<h3>Add The Markers To The Map<\/h3>\n\n\n<p>Finally, here we are, the last step! <\/p>\n\n\n<p>We now have a map and members coordinates, how about we do some cooking to mix them? <\/p>\n\n\n<p>Sounds good to me. <\/p>\n\n\n<p>Nothing fancy, let&#8217;s define the <strong>drawMarkers()<\/strong> method called in the last method in the fetch members&#8217; success callback function. This method will go through all member locations we received from our backend and create a Google Map marker (<a href=\"https:\/\/developers.google.com\/maps\/documentation\/javascript\/markers\" target=\"_blank\" rel=\"noopener\">more details here<\/a>). <\/p>\n\n\n<p>Then, we will use the user&#8217;s info, that we pass as well in the Ajax PHP callback to have some HTML markup inside the map marker. Again, easy-peasy.<\/p>\n\n\n<div class=\"wp-block-coblocks-gist\"><script src=\"https:\/\/gist.github.com\/2Fwebd\/5d4dc5e2a8ddb448c87e0a429aab7654.js\"><\/script><noscript><a href=\"https:\/\/gist.github.com\/2Fwebd\/5d4dc5e2a8ddb448c87e0a429aab7654\" target=\"_blank\" rel=\"noopener\">View this gist on GitHub<\/a><\/noscript><\/div>\n\n\n<p>As you very likely have guessed, we are using a child theme in this tutorial for our <a href=\"https:\/\/woffice.io?ref=alkaweb\">Woffice theme<\/a>. <\/p>\n\n\n<p>Which provides Bootstrap 4 out of the box, so no CSS, yay! I just used helper classes to get a &#8220;nice&#8221; (not bad) layout inside my marker: <\/p>\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><img src=\"https:\/\/alkalab.com\/wp\/wp-content\/uploads\/2019\/02\/Shortcode_tuto_\u2013_Eonet_Dev-2-1024x494.jpg\" alt=\"Preview of WordPress BuddyPress Members Map\" class=\"wp-image-1143\"\/><\/figure><\/div>\n\n\n<p>Which is our final result! <em>Just this?<\/em> <strong>Wait<\/strong>, that&#8217;s a simple example, it&#8217;s super flexible, will support as many members you want, you can change the content, style, animations, marker and a lot more. <\/p>\n\n\n<p>You can see some cool examples in our <a href=\"https:\/\/demos.alka-web.com\/eonet\/members-map\/\" target=\"_blank\" rel=\"noopener\">Eonet<\/a> and <a href=\"https:\/\/demos.alka-web.com\/woffice\/business\/members\/\" target=\"_blank\" rel=\"noopener\">Woffice<\/a> members demo pages.<\/p>\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n<p>In summary, what we have done in this frontend part is: <\/p>\n\n\n<ol><li>Add Vue.js and the Google map public librairies to our frontend side. Plus, registering our own Vue.js component. <\/li><li>Create a Google Map using the Google Map API v3. <\/li><li>Fetch our members using the Ajax callback we have defined in the first step. <\/li><li>Render the members in the map using some pretty cool map markers. <\/li><\/ol>\n\n\n<h2>Conclusion<\/h2>\n\n\n<p>Hope you liked it! You are now able to create your own BuddyPress Members Map. <\/p>\n\n\n<p>For any detail or improvement you have in mind, please use the comment section below. <br \/><br \/>This being said, a couple of final notes here: <\/p>\n\n\n<ul><li><strong>Vue.js can be added to WordPress<\/strong>, <em>VERY<\/em> easily. It&#8217;s dynamic and easy to develop with. Use ES6 if you can.<\/li><li>If you have many members and they &#8220;step&#8221; on each other, <strong>consider using Marker clusters<\/strong> (<a href=\"https:\/\/developers.google.com\/maps\/documentation\/javascript\/marker-clustering\" target=\"_blank\" rel=\"noopener\">see this article<\/a>).<\/li><li>Finally, This tutorial was designed to be as simple as possible, <strong>there are dozens of improvements you can apply<\/strong>: using theme options, custom attributes, better marker markup, custom map style, better error handling and so on. <\/li><\/ul>\n\n\n<hr class=\"wp-block-separator\"\/>\n\n\n<p><em>You can find the complete code working in a Woffice child theme in <\/em><a href=\"https:\/\/drive.google.com\/file\/d\/14ODmtj7im5KfobTo-UdSdqshSPjBOIQK\/view?usp=sharing\" target=\"_blank\" rel=\"noopener\"><em>this .zip<\/em><\/a><em> (no, I won&#8217;t collect your email address!).<\/em><\/p>\n\n\n<p>Want to create your own WordPress plugin? Check out <a href=\"https:\/\/alkalab.com\/blog\/tutorial-wordpress-plugin-web-app\/\" target=\"_blank\" rel=\"noopener\">this article<\/a>.<\/p>\n\n\n<p><em>Thanks for reading and see you in the next one!<\/em><\/p>\n","protected":false},"excerpt":{"rendered":"<p>Let&#8217;s create our BuddyPress Members Map using Vue.js. Welcome to you. This article will explain to you how to create a fully dynamic Google Maps of your BuddyPress Members on your WordPress site, on any page. Easily. This tutorial is [&hellip;]<\/p>\n","protected":false},"author":1,"featured_media":1104,"comment_status":"closed","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[5,20,7],"tags":[],"_links":{"self":[{"href":"https:\/\/woffice.io\/wp-json\/wp\/v2\/posts\/1102"}],"collection":[{"href":"https:\/\/woffice.io\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/woffice.io\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/woffice.io\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/woffice.io\/wp-json\/wp\/v2\/comments?post=1102"}],"version-history":[{"count":1,"href":"https:\/\/woffice.io\/wp-json\/wp\/v2\/posts\/1102\/revisions"}],"predecessor-version":[{"id":5656,"href":"https:\/\/woffice.io\/wp-json\/wp\/v2\/posts\/1102\/revisions\/5656"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/woffice.io\/wp-json\/wp\/v2\/media\/1104"}],"wp:attachment":[{"href":"https:\/\/woffice.io\/wp-json\/wp\/v2\/media?parent=1102"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/woffice.io\/wp-json\/wp\/v2\/categories?post=1102"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/woffice.io\/wp-json\/wp\/v2\/tags?post=1102"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}