{"id":638,"date":"2018-03-16T07:00:29","date_gmt":"2018-03-16T07:00:29","guid":{"rendered":"https:\/\/alka-web.com\/?p=638"},"modified":"2021-03-26T04:24:54","modified_gmt":"2021-03-26T04:24:54","slug":"building-our-first-fully-fledged-saas-using-vue-js","status":"publish","type":"post","link":"https:\/\/woffice.io\/building-our-first-fully-fledged-saas-using-vue-js\/","title":{"rendered":"Our first SaaS application using Vue.js"},"content":{"rendered":"<p>In this article, I am going to share with you guys some development practices we adopted while building our first complete Entreprise Software Web Application using <a href=\"https:\/\/vuejs.org\/\" rel=\"nofollow noopener\" target=\"_blank\">Vue.js<\/a>. We have been through a long nerdy journey crafting <a href=\"https:\/\/feedier.com?utm_medium=article&amp;utm_source=blog&amp;utm_campaign=Blog-Brand-awareness-2018-03-11&amp;utm_content=blogArticleVueJS\" target=\"_blank\" rel=\"noopener\">Feedier<\/a>.<br \/>\nIn a nutshell, Feedier lets you collect valuable Feedback from your customers.\u00a0We challenge you to understand your customers and engage with them through our reward and engagement programs. Brand unique &amp; enjoyable surveys. Value, engage, respect &amp; reward your customers! ?<br \/>\nEnough sales talk, let&#8217;s dive right in.<\/p>\n<h2>Consistency matters<\/h2>\n<p>One of Vue.js core features are the object&#8217;s lifecycle.\u00a0These give you utter control over what you want to do or set off, and when you want to.<br \/>\nWhile building our application, although we had our internal best practices, .vue files making up our app started to get longer, and we could have rapidly lost track. Developers tend to use these hooks differently, for different purposes and would lay them out differently.<br \/>\nFor instance, some developers are keen on using the <em>mounted<\/em> hook for most of their data\/API related code, while others would do that in the <em>created<\/em> hook. So you end up with inconsistency between your files.<br \/>\nThat&#8217;s when it started to be dreadful for us.<br \/>\n<b>Bottom line? Discuss and agree on how you want to structure your files and use your framework&#8217;s features beforehand.<\/b><\/p>\n<h2>Plan your features ahead<\/h2>\n<p>Is your application going to be translated? How are you going to handle the login and safety in your app? How would you design your database? These are question examples you should ask yourself before typing in any code. They are typically the kind of things we tend to implement later down the line, or tend to simply knock out, and by doing that, you increase your likeliness of breaking things. As a rule of thumb, don&#8217;t put these guys off and face them right from the inception!<\/p>\n<h2>And don&#8217;t trick yourself<\/h2>\n<p>If you get started on your first project, your team is most likely made of developers, or in other words, people eager to &#8220;build things&#8221;, and that would easily tend to forget about the main objectives: getting that application up on the market. It&#8217;s easy and attracting to implement stuff as soon as the idea comes in.<br \/>\nBut, would your target be interested in such feature? Is it expecting it in the beta version? And are your customers willing to pay for this supposedly &#8216;awesome&#8217; feature? In other word, would that be a USP?<br \/>\nThe further you&#8217;re going away from your initial offer, the more you&#8217;re delaying your launch date.<br \/>\nOne recommendation? Sure, get feedback, add features when everyone is convinced about their usefulness and requirement, but hold back from sinking your team in.<br \/>\nWe&#8217;ve dragged our development phased on &#8211; and it could have been cut way off.<\/p>\n<h2>Get yourself up to speed with your tools<\/h2>\n<p>When working on a team project, because you&#8217;re using one tool doesn&#8217;t necessarily mean that you get a grasp over it. Maybe it comes from a teammates, maybe you used to be comfortable with it but haven&#8217;t used it in a while, whatever is your the reason, you need to get yourself up to speed!<br \/>\nMost of today&#8217;s modern tools are getting updated so often that we tend to miss important and stunning new features.<br \/>\nThe point is, read the doc again, be confortable, it will save you time on the long run. Instead of rustling up a workaround, or looking for a solution in the doc, you will be confident from the beginning on.<br \/>\nJust to give you an example, at the beginning of our Feedier journey, we almost missed the Events Bus at the outset, so we were kinda coming up with our solution. And then we found out about that, so we changed everything. Worth doing it, but still, it could have saved us some hassles to do it from scratch.<\/p>\n<h2>Forget about console.log<\/h2>\n<p>Just shedding some lights into the available alternatives and why you would ditch your favorite\u00a0<em>console.log <\/em>trick.<br \/>\nAgain, Vue offers its stunning development tool &#8211; <a href=\"https:\/\/github.com\/vuejs\/vue-devtools\" rel=\"nofollow noopener\" target=\"_blank\">Vue.js devtools<\/a> &#8211; available on Chrome and Firefox. This plugin gives you extreme flexibility and definitely cut the development time back! Among other, it gives you the ability to tweak data value, navigate straight to the Vue.js component from the DOM inspector, flick through the different Events, and, first and foremost, gives you the data and computed properties values.<br \/>\nFor instance, while building our <em>onboarding<\/em>\u00a0widgets, instead of fiddling with our API to mock some data and make sure the onboarded attribute was always false, we simply had to change its value in the browser. Easy peasy!<br \/>\nToggling a boolean or change a data relying on a bunch of conditions, events and some API calls becomes a no-brainer.<br \/>\n<figure id=\"attachment_675\" aria-describedby=\"caption-attachment-675\" style=\"width: 800px\" class=\"wp-caption aligncenter\"><img loading=\"lazy\" class=\"size-full wp-image-675\" src=\"https:\/\/alka-web.com\/wp\/wp-content\/uploads\/2018\/03\/Screen-Capture-on-2018-03-15-at-23-49-03.gif\" alt=\"Vue.js dev tool\" width=\"800\" height=\"536\" \/><figcaption id=\"caption-attachment-675\" class=\"wp-caption-text\">Vue.js dev tool<\/figcaption><\/figure><br \/>\nBesides this, Webpack is also great when it comes to debugging. By simply using the <span style=\"text-decoration: underline;\"><em>eval-source-map<\/em><\/span>\u00a0property in your <strong>dev<\/strong> config, you get all of your .vue components available in the Browser and the right line mentioned when there is an error cropping up. One click, and you jump to the line, even though everything is bundled and compiled under the hood. Gorgeous, isn&#8217;t it?<br \/>\nSuffice it to say, you have everything you need for a decent working environment. You &#8220;<em>just<\/em>&#8221; have to build.<\/p>\n<h2>Plan and lay out your code architecture<\/h2>\n<p>As most modern JS frameworks, Vue.js gives you have the ability to split your code into <strong>reusable components<\/strong>. This is brilliant, and that&#8217;s why before writing any code, you have to ask yourself:<\/p>\n<ul>\n<li>Is there any piece of my code that could be used anywhere else with other data?<\/li>\n<li>If so, how can I make it flexible, open to modification, extensive and reusable with ease?<\/li>\n<\/ul>\n<p><figure id=\"attachment_652\" aria-describedby=\"caption-attachment-652\" style=\"width: 880px\" class=\"wp-caption aligncenter\"><img loading=\"lazy\" class=\"wp-image-652 size-full\" src=\"https:\/\/alka-web.com\/wp\/wp-content\/uploads\/2018\/03\/Screen-Shot-2018-03-11-at-23.48.15.png\" alt=\"Feedier dashboard preview\" width=\"880\" height=\"440\" \/><figcaption id=\"caption-attachment-652\" class=\"wp-caption-text\">Feedier dashboard preview &#8211; could you guess how many components do we have on this page?<\/figcaption><\/figure><br \/>\nFinding the right trade-off between too much props and not enough components is tough though. As a rule of thumb, avoid overrunning your components with props anyway!<br \/>\nBut that&#8217;s not all, you must also watch out for long clunky files that would make your experience as a developer worse and worse overtime. It was especially true with our JS helpers file. Every helper was just adding up, but the file became unusable. We had to break that up into a bunch of meaningful files, reaping the benefits of ES6 import\/export features.<br \/>\nDoing that from the outset would have saved us time, efforts and bugs.<\/p>\n<h2>Hold back from using third-party packages when possible<\/h2>\n<p>Make no mistake, Open Source is fantastic ! Building a complete web applications takes a sh*tload of time and resources, that&#8217;s why it&#8217;s very tempting to rely on a NPM package to do your job whenever there is one available.<br \/>\nIt&#8217;s also really enticing to install the latest package that got very popular on Github last week, or was mentioned in a bunch of articles on Medium and seems useful for your project.<br \/>\nBut &#8230;. you actually have to factor in the real benefits of using it over building a simple handmade script that would do the job just fine! Our motto would be: draw it up yourself whenever you can! And only fall to the package back if it substantially reduce the amount of work, or you have no way but to do it.<br \/>\n<figure id=\"attachment_646\" aria-describedby=\"caption-attachment-646\" style=\"width: 640px\" class=\"wp-caption aligncenter\"><img loading=\"lazy\" class=\"wp-image-646 size-large\" src=\"https:\/\/alka-web.com\/wp\/wp-content\/uploads\/2018\/03\/code-1024x639.png\" alt=\"Sample of or core packages\" width=\"640\" height=\"399\" \/><figcaption id=\"caption-attachment-646\" class=\"wp-caption-text\">Sample of our core packages<\/figcaption><\/figure><br \/>\nRestricting yourself to the foremost plugins also reduce your overall script size and contribute to your web-app speed. That said, picking the right tools and avoid swamping yourself with the tons of packages isn&#8217;t a breeze!<br \/>\nBy the way, if you&#8217;re wondering what is Apollo and GraphQL about, check out <a href=\"https:\/\/codeburst.io\/up-and-running-with-graphql-laravel-and-vue-js-698000248448\" rel=\"nofollow noopener\" target=\"_blank\">this article<\/a>, we explain the nitty-gritty details about <a href=\"http:\/\/graphql.org\/\" rel=\"nofollow noopener\" target=\"_blank\">GraphQL<\/a> and why it matters. It&#8217;s definitely worth reading. <em>Long story short?<\/em>\u00a0If you&#8217;re still wondering how on earth you&#8217;re going to structure your Rest API &#8211; stop thinking, and jump straight into a <a href=\"http:\/\/graphql.org\/\" rel=\"nofollow noopener\" target=\"_blank\">GraphQL<\/a> server, which is nicely integrated with the Apollo client thanks to this <a href=\"https:\/\/github.com\/Akryum\/vue-apollo\" rel=\"nofollow noopener\" target=\"_blank\">vue-apollo plugin.<\/a><br \/>\nTo conclude, if you have a great business idea for your next application, don&#8217;t shy away &#8211; and move forward! Validate your idea rallying your friends&#8217; feedback, and creating your Business Model Canvas. Then, get your MVP out, with the most important features, and collect feedback from that. You just want your users to get to that AHA moment as soon as possible. You have all the tech advices you need, let&#8217;s go!<br \/>\nWe hope this article has been helpful and will help anyone embracing the gorgeous Vue.js for his next venture!<br \/>\nAny question, feedback or idea? Just throw a comment away below.\u00a0?<br \/>\nBy the way, we are currently in beta mode, <strong>join our crew and make your customers<\/strong> feel valued now at <a href=\"https:\/\/feedier.com?utm_medium=article&amp;utm_source=blog&amp;utm_campaign=Blog-Brand-awareness-2018-03-11&amp;utm_content=blogArticleVueJS\" target=\"_blank\" rel=\"noopener\">feedier.com<\/a><\/p>\n","protected":false},"excerpt":{"rendered":"<p>In this article, I am going to share with you guys some development practices we adopted while building our first complete Entreprise Software Web Application using Vue.js. We have been through a long nerdy journey crafting Feedier. In a nutshell, [&hellip;]<\/p>\n","protected":false},"author":1,"featured_media":664,"comment_status":"closed","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[18,20],"tags":[17,19],"_links":{"self":[{"href":"https:\/\/woffice.io\/wp-json\/wp\/v2\/posts\/638"}],"collection":[{"href":"https:\/\/woffice.io\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/woffice.io\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/woffice.io\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/woffice.io\/wp-json\/wp\/v2\/comments?post=638"}],"version-history":[{"count":1,"href":"https:\/\/woffice.io\/wp-json\/wp\/v2\/posts\/638\/revisions"}],"predecessor-version":[{"id":5663,"href":"https:\/\/woffice.io\/wp-json\/wp\/v2\/posts\/638\/revisions\/5663"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/woffice.io\/wp-json\/wp\/v2\/media\/664"}],"wp:attachment":[{"href":"https:\/\/woffice.io\/wp-json\/wp\/v2\/media?parent=638"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/woffice.io\/wp-json\/wp\/v2\/categories?post=638"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/woffice.io\/wp-json\/wp\/v2\/tags?post=638"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}