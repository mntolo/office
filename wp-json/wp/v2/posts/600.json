{"id":600,"date":"2018-02-23T09:24:49","date_gmt":"2018-02-23T09:24:49","guid":{"rendered":"https:\/\/alka-web.com\/?p=600"},"modified":"2021-03-26T04:24:54","modified_gmt":"2021-03-26T04:24:54","slug":"tutorial-wordpress-plugin-web-app","status":"publish","type":"post","link":"https:\/\/woffice.io\/tutorial-wordpress-plugin-web-app\/","title":{"rendered":"How To Create a WordPress Plugin For Your Web App"},"content":{"rendered":"<p>Today, we are going to see how to create a very simple WordPress plugin for any web app that needs to insert a piece of code to your site.<\/p>\n\n<p>To follow this tutorial, you need basics:<\/p>\n\n\n<ul><li><strong>PHP<\/strong> and Object Oriented Programming <\/li><li><strong>JavaScript<\/strong>, we&#8217;ll use jQuery and Ajax<\/li><li><strong>WordPress development,<\/strong> most functions are from the WordPress core.<\/li><\/ul>\n\n\n<p>You can find a working result of this tutorial on <a href=\"https:\/\/github.com\/2Fwebd\/feedier-wordpress-plugin\" target=\"_blank\" rel=\"noopener\">this Github repository<\/a>.<\/p>\n\n\n<p>These web apps could be <a href=\"http:\/\/crazyegg.com\" target=\"_blank\" rel=\"noopener\">CrazyEgg<\/a>, <a href=\"https:\/\/freshdesk.com\" target=\"_blank\" rel=\"noopener\"><g class=\"gr_ gr_8 gr-alert gr_spell gr_inline_cards gr_run_anim ContextualSpelling ins-del multiReplace\" id=\"8\" data-gr-id=\"8\">Freshbook<\/g><\/a>,<a href=\"https:\/\/analytics.google.com\/analytics\/web\/\" target=\"_blank\" rel=\"noopener\"> Google Analytic<\/a>, <a href=\"https:\/\/www.facebook.com\/business\/a\/facebook-pixel\" target=\"_blank\" rel=\"noopener\">Facebook Pixel<\/a> or <a href=\"https:\/\/feedier.com\/\" target=\"_blank\" rel=\"noopener\">Feedier<\/a>. <\/p>\n\n\n<p>Why? <\/p>\n\n\n<p>They all need to inject some HTML \/ JavaScript code to your site for various purposes. <\/p>\n\n\n<p>This &#8220;code&#8221; is always parametrized with variables and usually is a pain for the site owner because he needs to edit the theme&#8217;s templates. So, how about we create a plugin to do that for us? <\/p>\n\n\n<p>Okay, let&#8217;s do it<g class=\"gr_ gr_5 gr-alert gr_gramm gr_inline_cards gr_run_anim Style multiReplace\" id=\"5\" data-gr-id=\"5\">! <\/g><\/p>\n\n\n<h2>Step 1: Find Your Web App &#8211; Feedier Example<\/h2>\n\n\n<p>The goal of this tutorial is to create a WordPress plugin that adds a WordPress admin page. <\/p>\n\n\n<p>Plus, some settings\u00a0 to configure the app&#8217;s in-site widget and inject the HTML \/ Js code in our web page automatically. Nothing fancy, just something that works fine.<\/p>\n\n\n<p><strong>So, we do need a web application for this tutorial. We will use for this example\u00a0<a href=\"https:\/\/feedier.com\" target=\"_blank\" rel=\"noopener\">Feedier<\/a>. <\/strong><\/p>\n\n\n<p><strong>However, if you do have the other web application to apply this tutorial, please do. Just rename the &#8220;feedier&#8221; with your app and adapt the settings to what this app needs.\u00a0<\/strong><\/p>\n\n\n<p><strong>Most of them will give you a snippet to add to your site in order to work.<\/strong><\/p>\n\n\n<p>Quick briefing of <a href=\"https:\/\/feedier.com\" target=\"_blank\" rel=\"noopener\">Feedier<\/a> if you never heard of it:<\/p>\n\n\n<ul><li>It&#8217;s a feedback collector tool, using surveys to understand your users<\/li><li>It&#8217;s very flexible<\/li><li><em>It&#8217;s free!&nbsp;<\/em><\/li><li><strong>Has a good API<\/strong> (very important here)<\/li><li><strong>Has an in-site widget<\/strong> (very important here)<\/li><li>Lets you reward your customers<\/li><li>Lets you create conditional questions<\/li><li>Has a complete analytic report dashboard<\/li><li>Lets you manage feedback individually<\/li><\/ul>\n\n\n<p>Here is the widget we want to add automatically:<\/p>\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><img src=\"https:\/\/alka-web.com\/wp\/wp-content\/uploads\/2018\/02\/Woffice_-_Best_Intranet___Extranet_Wordpress_Theme.jpg\" alt=\"Feedier Widget Preview\" class=\"wp-image-604\"\/><\/figure><\/div>\n\n\n<p>If you signed up to Feedier, then you can simply find the code in the Share tab of your survey:<\/p>\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><img src=\"https:\/\/alka-web.com\/wp\/wp-content\/uploads\/2018\/02\/Feedier_Dashboard_\u2014_Next_generation_feedback.jpg\" alt=\"Feedier Preview Sharing Method\" class=\"wp-image-603\"\/><\/figure><\/div>\n\n\n<h2>Step 2: Setup Our Plugin and Its Architecture<\/h2>\n\n\n<p>WordPress plugins <g class=\"gr_ gr_5 gr-alert gr_gramm gr_inline_cards gr_run_anim Grammar multiReplace\" id=\"5\" data-gr-id=\"5\">are<\/g> by design very simple. Our plugin will only need two files.<\/p>\n\n\n<ul><li><strong>feedier.php<\/strong>: main plugin&#8217;s PHP file.<\/li><li><strong>assets\/js\/admin.js<\/strong>: JavaScript script to save the options using Ajax.<\/li><\/ul>\n\n\n<p>You can create a new &#8220;feedier&#8221; directory (or name of your web app) in your <strong>wp-content\/plugins\/<\/strong> folder.<\/p>\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><img src=\"https:\/\/alka-web.com\/wp\/wp-content\/uploads\/2018\/02\/js.jpg\" alt=\"Directory Architecture\" class=\"wp-image-606\"\/><\/figure><\/div>\n\n\n<p>The most important file will be the plugin&#8217;s <strong>feedier.php<\/strong> class. Here is its structure:<\/p>\n\n\n<pre class=\"wp-block-code\"><code>&lt;?php\n\/**\n * Plugin Name:       Feedier\n * Description:       Smart surveys start now!\n * Version:           1.0.0\n * Author:            Alkaweb\n * Author URI:        https:\/\/alka-web.com\n * Text Domain:       alkaweb\n * License:           GPL-2.0+\n * License URI:       http:\/\/www.gnu.org\/licenses\/gpl-2.0.txt\n * GitHub Plugin URI: https:\/\/github.com\/2Fwebd\/feedier-wordpress\n *\/\n\/*\n * Plugin constants\n *\/\nif(!defined('FEEDIER_URL'))\n\tdefine('FEEDIER_URL', plugin_dir_url( __FILE__ ));\nif(!defined('FEEDIER_PATH'))\n\tdefine('FEEDIER_PATH', plugin_dir_path( __FILE__ ));\n\/*\n * Main class\n *\/\n\/**\n * Class Feedier\n *\n * This class creates the option page and add the web app script\n *\/\nclass Feedier\n{\n    \/**\n     * Feedier constructor.\n     *\n     * The main plugin actions registered for WordPress\n     *\/\n    public function __construct()\n    {\n    }\n}\n\/*\n * Starts our plugin class, easy!\n *\/\nnew Feedier();<\/code><\/pre>\n\n\n<p>We are doing a few things here:<\/p>\n\n\n<ul><li>Declaring our plugin using the header comments<\/li><li>Defining a few handy constants to be able to find the plugin&#8217;s URL and PATH easily<\/li><li>Declaring our plugin class that will contain everything we need in this plugin. We just need a constructor method for now<\/li><\/ul>\n\n\n<p>You should already see the plugin in your Plugins page, even though it&#8217;s not doing anything yet:<\/p>\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><img src=\"https:\/\/alka-web.com\/wp\/wp-content\/uploads\/2018\/02\/Plugins_\u2039_TEST_\u2014_WordPress.jpg\" alt=\"WordPress plugin activation\" class=\"wp-image-607\"\/><\/figure><\/div>\n\n\n<h2>Step 3: Create Our Admin Page<\/h2>\n\n\n<p>For this part, we will add a new Feedier admin page to our WordPress site and dynamically fetch our surveys from the Feedier&#8217;s API.<\/p>\n\n\n<p>In our class&#8217; constructor let&#8217;s register three new actions which are required to add an admin page on WordPress:<\/p>\n\n\n<pre class=\"wp-block-preformatted\">\/**\n * Feedier constructor.\n *\n * The main plugin actions registered for WordPress\n *\/\npublic function __construct()\n{\n\t\/\/ Admin page calls:\n\tadd_action( 'admin_menu', array( $this, 'addAdminMenu' ) );\n\tadd_action( 'wp_ajax_store_admin_data', array( $this, 'storeAdminData' ) );\n\tadd_action( 'admin_enqueue_scripts', array( $this, 'addAdminScripts' ) );\n}<\/pre>\n\n\n<ul><li><strong>addAdminMenu<\/strong> will add a new page in the WordPress left menu. There will be also a callback to another method containing the page&#8217;s content.<\/li><li><strong>storeAdminData<\/strong> will be called whenever the user clicks the &#8220;Save settings&#8221; button.<\/li><li>\b<strong>addAdminScripts <\/strong>will register a new JavaScript file to our WordPress admin in order to save the form&#8217;s data. But also exchanges some variables between the PHP side and JavaScript side.<\/li><\/ul>\n\n\n<p>The first one is very easy, we just register the page:<\/p>\n\n\n<pre class=\"wp-block-preformatted\">\/**\n * Adds the Feedier label to the WordPress Admin Sidebar Menu\n *\/\npublic function addAdminMenu()\n{\n    add_menu_page(\n\t__( 'Feedier', 'feedier' ),\n\t__( 'Feedier', 'feedier' ),\n\t'manage_options',\n\t'feedier',\n\tarray($this, 'adminLayout'),\n\t''\n     );\n}<\/pre>\n\n\n<p>As you can see we use <a href=\"https:\/\/codex.wordpress.org\/I18n_for_WordPress_Developers\" target=\"_blank\" rel=\"noopener\">WordPress localization functions<\/a> for <em>all<\/em> strings. Note that the:<\/p>\n\n\n<pre class=\"wp-block-preformatted\">array($this, 'adminLayout')<\/pre>\n\n\n<p>Is where we call another method containing the page&#8217;s content. The form needs to be adapted to your web app.<\/p>\n\n\n<p>Here, we first need to get the public and private Feedier API keys. Once saved, we are going to use the private key to dynamically retrieve our surveys. Whenever we get the surveys and not an API error, we display some new options to configure the widget.<\/p>\n\n\n<pre class=\"wp-block-preformatted\">\/**\n * Outputs the Admin Dashboard layout containing the form with all its options\n *\n * @return void\n *\/\npublic function adminLayout()\n{\n\t$data = $this-&gt;getData();\n\t$surveys = $this-&gt;getSurveys($data['private_key']);\n\t?&gt;\n\t&lt;div class=\"wrap\"&gt;\n\t    &lt;h3&gt;&lt;?php _e('Feedier API Settings', 'feedier'); ?&gt;&lt;\/h3&gt;\n            &lt;p&gt;\n\t        &lt;?php _e('You can get your Feedier API settings from your &lt;b&gt;Integrations&lt;\/b&gt; page.', 'feedier'); ?&gt;\n            &lt;\/p&gt;\n            &lt;hr&gt;\n            &lt;form id=\"feedier-admin-form\"&gt;\n\t\t&lt;table class=\"form-table\"&gt;\n                    &lt;tbody&gt;\n                        &lt;tr&gt;\n                            &lt;td scope=\"row\"&gt;\n                                &lt;label&gt;&lt;?php _e( 'Public key', 'feedier' ); ?&gt;&lt;\/label&gt;\n                            &lt;\/td&gt;\n                            &lt;td&gt;\n                                &lt;input name=\"feedier_public_key\"\n                                       id=\"feedier_public_key\"\n                                       class=\"regular-text\"\n                                       value=\"&lt;?php echo (isset($data['public_key'])) ? $data['public_key'] : ''; ?&gt;\"\/&gt;\n                            &lt;\/td&gt;\n                        &lt;\/tr&gt;\n                        &lt;tr&gt;\n                            &lt;td scope=\"row\"&gt;\n                                &lt;label&gt;&lt;?php _e( 'Private key', 'feedier' ); ?&gt;&lt;\/label&gt;\n                            &lt;\/td&gt;\n                            &lt;td&gt;\n                                &lt;input name=\"feedier_private_key\"\n                                       id=\"feedier_private_key\"\n                                       class=\"regular-text\"\n                                       value=\"&lt;?php echo (isset($data['private_key'])) ? $data['private_key'] : ''; ?&gt;\"\/&gt;\n                            &lt;\/td&gt;\n                        &lt;\/tr&gt;\n                        &lt;tr&gt;\n                            &lt;td&gt;\n                                &lt;hr&gt;\n                                &lt;h4&gt;&lt;?php _e( 'Widget options', 'feedier' ); ?&gt;&lt;\/h4&gt;\n                            &lt;\/td&gt;\n                        &lt;\/tr&gt;\n                        &lt;?php if (!empty($data['private_key']) &amp;&amp; !empty($data['public_key'])): ?&gt;\n                            &lt;?php\n                            \/\/ if we don't even have a response from the API\n                            if (empty($surveys)) : ?&gt;\n                                &lt;tr&gt;\n                                    &lt;td&gt;\n\t                                    &lt;p class=\"notice notice-error\"&gt;\n                                            &lt;?php _e( 'An error happened on the WordPress side. Make sure your server allows remote calls.', 'feedier' ); ?&gt;\n                                        &lt;\/p&gt;\n                                    &lt;\/td&gt;\n                                &lt;\/tr&gt;\n                            &lt;?php\n                            \/\/ If we have an error returned by the API\n                            elseif (isset($surveys['error'])): ?&gt;\n                                &lt;tr&gt;\n                                    &lt;td&gt;\n                                        &lt;p class=\"notice notice-error\"&gt;\n                                            &lt;?php echo $surveys['error']; ?&gt;\n                                        &lt;\/p&gt;\n                                    &lt;\/td&gt;\n                                &lt;\/tr&gt;\n                            &lt;?php\n                            \/\/ If the surveys were returned\n                            else: ?&gt;\n                                &lt;tr&gt;\n                                    &lt;td&gt;\n                                        &lt;p class=\"notice notice-success\"&gt;\n\t                                        &lt;?php _e( 'The API connection is established!', 'feedier' ); ?&gt;\n                                        &lt;\/p&gt;\n                                        &lt;div&gt;\n                                            &lt;label&gt;&lt;?php _e( 'Choose a survey', 'feedier' ); ?&gt;&lt;\/label&gt;\n                                        &lt;\/div&gt;\n                                        &lt;select name=\"feedier_widget_carrier_id\"\n                                                id=\"feedier_widget_carrier_id\"&gt;\n                                            &lt;?php\n                                            \/\/ We loop through the surveys\n                                            foreach ($surveys['data'] as $survey) : ?&gt;\n                                                &lt;?php\n                                                \/\/ We also only keep the id -&gt; x from the carrier_x returned by the API\n                                                $survey['id'] = substr($survey['id'], 8); ?&gt;\n                                                &lt;option value=\"&lt;?php echo $survey['id']; ?&gt;\" &lt;?php echo ($survey['id'] === $data['widget_carrier_id']) ? 'selected' : '' ?&gt;&gt;\n                                                    &lt;?php echo $survey['name']; ?&gt;\n                                                &lt;\/option&gt;\n                                            &lt;?php endforeach; ?&gt;\n                                        &lt;\/select&gt;\n                                        &lt;hr&gt;\n                                &lt;\/tr&gt;\n                                &lt;tr&gt;\n                                    &lt;td&gt;\n                                        &lt;div class=\"label-holder\"&gt;\n                                            &lt;label&gt;&lt;?php _e( 'Display probability (from 0 to 100)', 'feedier' ); ?&gt;&lt;\/label&gt;\n                                        &lt;\/div&gt;\n                                        &lt;input name=\"feedier_widget_display_probability\"\n                                               id=\"feedier_widget_display_probability\"\n                                               class=\"regular-text\"\n                                               value=\"&lt;?php echo (isset($data['widget_display_probability'])) ? $data['widget_display_probability'] : '100'; ?&gt;\"\/&gt;\n                                    &lt;\/td&gt;\n                                    &lt;td&gt;\n                                        &lt;div class=\"label-holder\"&gt;\n                                            &lt;label&gt;&lt;?php _e( 'Shaking effect (shake after 10s without click)', 'feedier' ); ?&gt;&lt;\/label&gt;\n                                        &lt;\/div&gt;\n                                        &lt;input name=\"feedier_widget_shake\"\n                                               id=\"feedier_widget_shake\"\n                                               type=\"checkbox\"\n                                            &lt;?php echo (isset($data['widget_shake']) &amp;&amp; $data['widget_shake']) ? 'checked' : ''; ?&gt;\/&gt;\n                                    &lt;\/td&gt;\n                                    &lt;td&gt;\n                                        &lt;div class=\"label-holder\"&gt;\n                                            &lt;label&gt;&lt;?php _e( 'Position', 'feedier' ); ?&gt;&lt;\/label&gt;\n                                        &lt;\/div&gt;\n                                        &lt;select name=\"feedier_widget_position\"\n                                                id=\"feedier_widget_position\"&gt;\n                                            &lt;option value=\"left\" &lt;?php echo (!isset($data['widget_position']) || (isset($data['widget_position']) &amp;&amp; $data['widget_position'] === 'left')) ? 'checked' : ''; ?&gt;&gt;\n                                                &lt;?php _e( 'Left side', 'feedier' ); ?&gt;\n                                            &lt;\/option&gt;\n                                            &lt;option value=\"right\" &lt;?php echo (isset($data['widget_position']) &amp;&amp; $data['widget_position'] === 'right') ? 'checked' : ''; ?&gt;&gt;\n                                                &lt;?php _e( 'Right side', 'feedier' ); ?&gt;\n                                            &lt;\/option&gt;\n                                        &lt;\/select&gt;\n                                    &lt;\/td&gt;\n                                &lt;\/tr&gt;\n                            &lt;?php endif; ?&gt;\n                        &lt;?php else: ?&gt;\n                            &lt;tr&gt;\n                                &lt;td&gt;\n                                    &lt;p&gt;Please fill up your API keys to see the widget options.&lt;\/p&gt;\n                                &lt;\/td&gt;\n                            &lt;\/tr&gt;\n                        &lt;?php endif; ?&gt;\n                        &lt;tr&gt;\n                            &lt;td colspan=\"2\"&gt;\n                                &lt;button class=\"button button-primary\" id=\"feedier-admin-save\" type=\"submit\"&gt;&lt;?php _e( 'Save', 'feedier' ); ?&gt;&lt;\/button&gt;\n                            &lt;\/td&gt;\n                        &lt;\/tr&gt;\n                    &lt;\/tbody&gt;\n                &lt;\/table&gt;\n            &lt;\/form&gt;\n\t&lt;\/div&gt;\n\t&lt;?php\n}<\/pre>\n\n\n<p>At the beginning of this method you can see that we are first getting the saved data with:<\/p>\n\n\n<pre class=\"wp-block-preformatted\">$data = $this-&gt;getData();<\/pre>\n\n\n<p>And getting the surveys from the Feedier API:<\/p>\n\n\n<pre class=\"wp-block-preformatted\">$surveys = $this-&gt;getSurveys($data['private_key']);<\/pre>\n\n\n<p>So let&#8217;s declare the first one:<\/p>\n\n\n<pre class=\"wp-block-preformatted\">\/**\n * The option name\n *\n * @var string\n *\/\nprivate $option_name = 'feedier_data';\n\/**\n * Returns the saved options data as an array\n *\n * @return array\n *\/\nprivate function getData() {\n    return get_option($this-&gt;option_name, array());\n}<\/pre>\n\n\n<p>This function just reads our plugin&#8217;s option and gives us an array back so we can save multiple values in the same option.<\/p>\n\n\n<p>Obviously, to get the second method working, we need the Feedier private key, which thus depends on the first one to access this key saved in the option:<\/p>\n\n\n<pre class=\"wp-block-preformatted\">\/**\n * Make an API call to the Feedier API and returns the response\n *\n * @param string $private_key\n * @return array\n *\/\nprivate function getSurveys($private_key)\n{\n    $data = array();\n    $response = wp_remote_get('https:\/\/api.feedier.com\/v1\/carriers\/?api_key='. $private_key);\n    if (is_array($response) &amp;&amp; !is_wp_error($response)) {\n\t$data = json_decode($response['body'], true);\n    }\n    return $data;\n}<\/pre>\n\n\n<p>The <a href=\"https:\/\/feedier.docs.apiary.io\/#reference\/0\/carrier-collection\/get-a-list-of-carriers\" target=\"_blank\" rel=\"noopener\">Feedier API is documented here<\/a>, so you can see what you will get in the response.<\/p>\n\n\n<p>At this moment, we have a complete new Admin page but nothing happens when we click on the save button because there is no saving mechanism, <em>yet<\/em>.<\/p>\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><img src=\"https:\/\/alka-web.com\/wp\/wp-content\/uploads\/2018\/02\/Feedier_\u2039_TEST_\u2014_WordPress.jpg\" alt=\"\" class=\"wp-image-612\"\/><\/figure><\/div>\n\n\n<p>Good enough, let&#8217;s save our data!<\/p>\n\n\n<p>As mentioned before, we will save our data using AJAX. Therefore, we need to register a new JavaScript file and exchange data using the <a href=\"https:\/\/codex.wordpress.org\/Function_Reference\/wp_localize_script\" target=\"_blank\" rel=\"noopener\">wp_localize_script()<\/a> function:<\/p>\n\n\n<pre class=\"wp-block-preformatted\">\/**\n * The security nonce\n *\n * @var string\n *\/\nprivate $_nonce = 'feedier_admin';\n\/**\n * Adds Admin Scripts for the Ajax call\n *\/\npublic function addAdminScripts()\n{\n      wp_enqueue_script('feedier-admin', FEEDIER_URL. '\/assets\/js\/admin.js', array(), 1.0);\n      $admin_options = array(\n\t 'ajax_url' =&gt; admin_url( 'admin-ajax.php' ),\n\t '_nonce'   =&gt; wp_create_nonce( $this-&gt;_nonce ),\n      );\n      wp_localize_script('feedier-admin', 'feedier_exchanger', $admin_options);\n}<\/pre>\n\n\n<p>We also need to add a new file<strong> \/assets\/js\/admin.js<\/strong>. That will simply make an Ajax call, WordPress will automatically route correctly the request to the right method (already done in the constructor). You can read more about how WordPress smartly handles AJAX requests <a href=\"https:\/\/codex.wordpress.org\/AJAX_in_Plugins\" target=\"_blank\" rel=\"noopener\">here<\/a>.<\/p>\n\n\n<pre class=\"wp-block-preformatted\">\/**\n * Feedier plugin Saving process\n *\/\njQuery( document ).ready( function () {\n    jQuery( document ).on( 'submit', '#feedier-admin-form', function ( e ) {\n        e.preventDefault();\n        \/\/ We inject some extra fields required for the security\n        jQuery(this).append('&lt;input type=\"hidden\" name=\"action\" value=\"store_admin_data\" \/&gt;');\n        jQuery(this).append('&lt;input type=\"hidden\" name=\"security\" value=\"'+ feedier_exchanger._nonce +'\" \/&gt;');\n        \/\/ We make our call\n        jQuery.ajax( {\n            url: feedier_exchanger.ajax_url,\n            type: 'post',\n            data: jQuery(this).serialize(),\n            success: function ( response ) {\n                alert(response);\n            }\n        } );\n    } );\n} );<\/pre>\n\n\n<p>At this very moment, we can click the save button and the above script will make an HTTP POST request to WordPress. <\/p>\n\n\n<p>We also append an action parameter containing:\u00a0<strong>store_admin_data<\/strong>. <\/p>\n\n\n<p>Which we declared at the\u00a0beginning at this part in the constructor:<\/p>\n\n\n<pre class=\"wp-block-preformatted\">add_action( 'wp_ajax_store_admin_data', array( $this, 'storeAdminData' ) );<\/pre>\n\n\n<p>The method <strong>storeAdminData<\/strong> will receive the POST request and save the values we need in our WordPress option.<\/p>\n\n\n<pre class=\"wp-block-preformatted\">\/**\n * Callback for the Ajax request\n *\n * Updates the options data\n *\n * @return void\n *\/\npublic function storeAdminData()\n{\n    if (wp_verify_nonce($_POST['security'], $this-&gt;_nonce ) === false)\n\tdie('Invalid Request!');\n    $data = $this-&gt;getData();\n    foreach ($_POST as $field=&gt;$value) {\n        if (substr($field, 0, 8) !== \"feedier_\" || empty($value))\n\t   continue;\n        \/\/ We remove the feedier_ prefix to clean things up\n\t$field = substr($field, 8);\n        $data[$field] = $value;\n    }\n    update_option($this-&gt;option_name, $data);\n    echo __('Saved!', 'feedier');\n    die();\n}<\/pre>\n\n\n<p>A few notes on the above method:<\/p>\n\n\n<ul><li>We use a &#8220;WordPress nonce&#8221; to handle the security and make sure this is coming from the website and not a hacker faking the request.<\/li><li>We identify the fields we need to save using a &#8220;feedier_&#8221; prefix. Once received, we loop through all the $_POST data and only save those fields. We also remove the prefix before saving every field.<\/li><\/ul>\n\n\n<p>That&#8217;s it for the saving process, when we click the save process we can see a POST request and our data is being saved on the database within the <strong>wp_options<\/strong> table.<\/p>\n\n\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><img src=\"https:\/\/alka-web.com\/wp\/wp-content\/uploads\/2018\/02\/Feedier_\u2039_TEST_\u2014_WordPress-1.jpg\" alt=\"\" class=\"wp-image-615\"\/><\/figure><\/div>\n\n\n<p>Perfect, we are done with the admin page.<\/p>\n\n\n<h2>Step 4: Insert The Dynamic Code Automatically Into Our Pages<\/h2>\n\n\n<p>Now that we have our options saved, we can create a dynamic widget that will depend on the options set by the user through our admin page. <\/p>\n\n\n<p>We already now what the web app expect from us.<\/p>\n\n\n<p>Something like:<\/p>\n\n\n<pre class=\"wp-block-preformatted\">&lt;div class=\"feedier-widget\" data-type=\"engager\" data-position=\"right\" data-carrier-id=\"x\" data-key=\"xxxxxxxxxxxxxxxxx\"&gt;&lt;\/div&gt;\n&lt;!-- Include this line only one time, also if you have multiple widgets on the current page --&gt;\n&lt;script src=\"https:\/\/feedier.com\/js\/widgets\/widgets.min.js\" type=\"text\/javascript\" async&gt;&lt;\/script&gt;<\/pre>\n\n\n<p>Thus, the first thing we want to do is to create a new method to our plugin that will print this code depending on the variables set by the user. While using the architecture we already set up in the last part:<\/p>\n\n\n<pre class=\"wp-block-preformatted\">\/**\n * Add the web app code to the page's footer\n *\n * This contains the widget markup used by the web app and the widget API call on the frontend\n * We use the options saved from the admin page\n *\n * @return void\n *\/\npublic function addFooterCode()\n{\n   $data = $this-&gt;getData();\n   \/\/ Only if the survey id is selected and saved\n   if(empty($data) || !isset($data['widget_carrier_id']))\n      return;\n   ?&gt;\n   &lt;div class=\"feedier-widget\"\n             data-type=\"engager\"\n             data-position=\"&lt;?php echo (isset($data['widget_position'])) ? $data['widget_position'] : 'left'; ?&gt;\"\n             data-display-probability=\"&lt;?php echo (isset($data['widget_display_probability'])) ? $data['widget_display_probability'] : '100'; ?&gt;\"\n             data-shake=\"&lt;?php echo (isset($data['widget_shake'])) ? $data['widget_shake'] : 'false'; ?&gt;\"\n             data-carrier-id=\"&lt;?php echo (isset($data['widget_carrier_id'])) ? $data['widget_carrier_id'] : '0'; ?&gt;\"\n             data-key=\"&lt;?php echo (isset($data['public_key'])) ? $data['public_key'] : '0'; ?&gt;\"&gt;&lt;\/div&gt;\n   &lt;script src=\"https:\/\/feedier.com\/js\/widgets\/widgets.min.js\" type=\"text\/javascript\" async&gt;&lt;\/script&gt;\n   &lt;?php\n}<\/pre>\n\n\n<p>Now, we just need to call this function on every page load to add it at the bottom of the page. To do this, we&#8217;ll hook our method to the <strong>wp_footer<\/strong> action. <\/p>\n\n\n<p>By registering a new action into our class&#8217; constructor:<\/p>\n\n\n<pre class=\"wp-block-preformatted\">\/**\n * Feedier constructor.\n *\n * The main plugin actions registered for WordPress\n *\/\npublic function __construct()\n{\n    add_action('wp_footer', array( $this, 'addFooterCode'));\n    ... what we had before ...\n}<\/pre>\n\n\n<p>That&#8217;s it! <\/p>\n\n\n<p>Any question, feedback, idea? Let me know in the comment!<\/p>\n\n\n<p>You can find a working result of this tutorial on <a href=\"https:\/\/github.com\/2Fwebd\/feedier-wordpress-plugin\" target=\"_blank\" rel=\"noopener\">this Github repository<\/a>.<\/p>\n\n\n<p>Note that this is the first version of the plugin, many things can be improved. <\/p>\n\n\n<p>Open to suggestions and improvements.<\/p>\n","protected":false},"excerpt":{"rendered":"<p>Today, we are going to see how to create a very simple WordPress plugin for any web app that needs to insert a piece of code to your site. To follow this tutorial, you need basics: PHP and Object Oriented [&hellip;]<\/p>\n","protected":false},"author":1,"featured_media":661,"comment_status":"closed","ping_status":"open","sticky":false,"template":"","format":"standard","meta":[],"categories":[5,7],"tags":[],"_links":{"self":[{"href":"https:\/\/woffice.io\/wp-json\/wp\/v2\/posts\/600"}],"collection":[{"href":"https:\/\/woffice.io\/wp-json\/wp\/v2\/posts"}],"about":[{"href":"https:\/\/woffice.io\/wp-json\/wp\/v2\/types\/post"}],"author":[{"embeddable":true,"href":"https:\/\/woffice.io\/wp-json\/wp\/v2\/users\/1"}],"replies":[{"embeddable":true,"href":"https:\/\/woffice.io\/wp-json\/wp\/v2\/comments?post=600"}],"version-history":[{"count":1,"href":"https:\/\/woffice.io\/wp-json\/wp\/v2\/posts\/600\/revisions"}],"predecessor-version":[{"id":5664,"href":"https:\/\/woffice.io\/wp-json\/wp\/v2\/posts\/600\/revisions\/5664"}],"wp:featuredmedia":[{"embeddable":true,"href":"https:\/\/woffice.io\/wp-json\/wp\/v2\/media\/661"}],"wp:attachment":[{"href":"https:\/\/woffice.io\/wp-json\/wp\/v2\/media?parent=600"}],"wp:term":[{"taxonomy":"category","embeddable":true,"href":"https:\/\/woffice.io\/wp-json\/wp\/v2\/categories?post=600"},{"taxonomy":"post_tag","embeddable":true,"href":"https:\/\/woffice.io\/wp-json\/wp\/v2\/tags?post=600"}],"curies":[{"name":"wp","href":"https:\/\/api.w.org\/{rel}","templated":true}]}}